"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@floating-ui";
exports.ids = ["vendor-chunks/@floating-ui"];
exports.modules = {

/***/ "(ssr)/../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrow: () => (/* binding */ arrow),\n/* harmony export */   autoPlacement: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.autoPlacement),\n/* harmony export */   autoUpdate: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.autoUpdate),\n/* harmony export */   computePosition: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.computePosition),\n/* harmony export */   detectOverflow: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.detectOverflow),\n/* harmony export */   flip: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.flip),\n/* harmony export */   getOverflowAncestors: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.getOverflowAncestors),\n/* harmony export */   hide: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.hide),\n/* harmony export */   inline: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.inline),\n/* harmony export */   limitShift: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.limitShift),\n/* harmony export */   offset: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.offset),\n/* harmony export */   platform: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.platform),\n/* harmony export */   shift: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.shift),\n/* harmony export */   size: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.size),\n/* harmony export */   useFloating: () => (/* binding */ useFloating)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A data provider that provides data to position an inner element of the\r\n * floating element (usually a triangle or caret) so that it is centered to the\r\n * reference element.\r\n * This wraps the core `arrow` middleware to allow React refs as the element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow = options => {\r\n  const {\r\n    element,\r\n    padding\r\n  } = options;\r\n  function isRef(value) {\r\n    return Object.prototype.hasOwnProperty.call(value, 'current');\r\n  }\r\n  return {\r\n    name: 'arrow',\r\n    options,\r\n    fn(args) {\r\n      if (isRef(element)) {\r\n        if (element.current != null) {\r\n          return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.arrow)({\r\n            element: element.current,\r\n            padding\r\n          }).fn(args);\r\n        }\r\n        return {};\r\n      } else if (element) {\r\n        return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.arrow)({\r\n          element,\r\n          padding\r\n        }).fn(args);\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\nvar index = typeof document !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_2__.useEffect;\r\n\r\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\r\n// functions\r\nfunction deepEqual(a, b) {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n  if (typeof a !== typeof b) {\r\n    return false;\r\n  }\r\n  if (typeof a === 'function' && a.toString() === b.toString()) {\r\n    return true;\r\n  }\r\n  let length, i, keys;\r\n  if (a && b && typeof a == 'object') {\r\n    if (Array.isArray(a)) {\r\n      length = a.length;\r\n      if (length != b.length) return false;\r\n      for (i = length; i-- !== 0;) {\r\n        if (!deepEqual(a[i], b[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    keys = Object.keys(a);\r\n    length = keys.length;\r\n    if (length !== Object.keys(b).length) {\r\n      return false;\r\n    }\r\n    for (i = length; i-- !== 0;) {\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\r\n        return false;\r\n      }\r\n    }\r\n    for (i = length; i-- !== 0;) {\r\n      const key = keys[i];\r\n      if (key === '_owner' && a.$$typeof) {\r\n        continue;\r\n      }\r\n      if (!deepEqual(a[key], b[key])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return a !== a && b !== b;\r\n}\r\n\r\nfunction useLatestRef(value) {\r\n  const ref = react__WEBPACK_IMPORTED_MODULE_2__.useRef(value);\r\n  index(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref;\r\n}\r\n\r\n/**\r\n * Provides data to position a floating element.\r\n * @see https://floating-ui.com/docs/react\r\n */\r\nfunction useFloating(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    placement = 'bottom',\r\n    strategy = 'absolute',\r\n    middleware = [],\r\n    platform,\r\n    whileElementsMounted,\r\n    open\r\n  } = options;\r\n  const [data, setData] = react__WEBPACK_IMPORTED_MODULE_2__.useState({\r\n    x: null,\r\n    y: null,\r\n    strategy,\r\n    placement,\r\n    middlewareData: {},\r\n    isPositioned: false\r\n  });\r\n  const [latestMiddleware, setLatestMiddleware] = react__WEBPACK_IMPORTED_MODULE_2__.useState(middleware);\r\n  if (!deepEqual(latestMiddleware, middleware)) {\r\n    setLatestMiddleware(middleware);\r\n  }\r\n  const referenceRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\r\n  const floatingRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\r\n  const dataRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(data);\r\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\r\n  const platformRef = useLatestRef(platform);\r\n  const [reference, _setReference] = react__WEBPACK_IMPORTED_MODULE_2__.useState(null);\r\n  const [floating, _setFloating] = react__WEBPACK_IMPORTED_MODULE_2__.useState(null);\r\n  const setReference = react__WEBPACK_IMPORTED_MODULE_2__.useCallback(node => {\r\n    if (referenceRef.current !== node) {\r\n      referenceRef.current = node;\r\n      _setReference(node);\r\n    }\r\n  }, []);\r\n  const setFloating = react__WEBPACK_IMPORTED_MODULE_2__.useCallback(node => {\r\n    if (floatingRef.current !== node) {\r\n      floatingRef.current = node;\r\n      _setFloating(node);\r\n    }\r\n  }, []);\r\n  const update = react__WEBPACK_IMPORTED_MODULE_2__.useCallback(() => {\r\n    if (!referenceRef.current || !floatingRef.current) {\r\n      return;\r\n    }\r\n    const config = {\r\n      placement,\r\n      strategy,\r\n      middleware: latestMiddleware\r\n    };\r\n    if (platformRef.current) {\r\n      config.platform = platformRef.current;\r\n    }\r\n    (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.computePosition)(referenceRef.current, floatingRef.current, config).then(data => {\r\n      const fullData = {\r\n        ...data,\r\n        isPositioned: true\r\n      };\r\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\r\n        dataRef.current = fullData;\r\n        react_dom__WEBPACK_IMPORTED_MODULE_3__.flushSync(() => {\r\n          setData(fullData);\r\n        });\r\n      }\r\n    });\r\n  }, [latestMiddleware, placement, strategy, platformRef]);\r\n  index(() => {\r\n    if (open === false && dataRef.current.isPositioned) {\r\n      dataRef.current.isPositioned = false;\r\n      setData(data => ({\r\n        ...data,\r\n        isPositioned: false\r\n      }));\r\n    }\r\n  }, [open]);\r\n  const isMountedRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(false);\r\n  index(() => {\r\n    isMountedRef.current = true;\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, []);\r\n  index(() => {\r\n    if (reference && floating) {\r\n      if (whileElementsMountedRef.current) {\r\n        return whileElementsMountedRef.current(reference, floating, update);\r\n      } else {\r\n        update();\r\n      }\r\n    }\r\n  }, [reference, floating, update, whileElementsMountedRef]);\r\n  const refs = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(() => ({\r\n    reference: referenceRef,\r\n    floating: floatingRef,\r\n    setReference,\r\n    setFloating\r\n  }), [setReference, setFloating]);\r\n  const elements = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(() => ({\r\n    reference,\r\n    floating\r\n  }), [reference, floating]);\r\n  return react__WEBPACK_IMPORTED_MODULE_2__.useMemo(() => ({\r\n    ...data,\r\n    update,\r\n    refs,\r\n    elements,\r\n    reference: setReference,\r\n    floating: setFloating\r\n  }), [data, update, refs, elements, setReference, setFloating]);\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/react/dist/floating-ui.react.esm.js":
/*!************************************************************************!*\
  !*** ../node_modules/@floating-ui/react/dist/floating-ui.react.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FloatingDelayGroup: () => (/* binding */ FloatingDelayGroup),\n/* harmony export */   FloatingFocusManager: () => (/* binding */ FloatingFocusManager),\n/* harmony export */   FloatingNode: () => (/* binding */ FloatingNode),\n/* harmony export */   FloatingOverlay: () => (/* binding */ FloatingOverlay),\n/* harmony export */   FloatingPortal: () => (/* binding */ FloatingPortal),\n/* harmony export */   FloatingTree: () => (/* binding */ FloatingTree),\n/* harmony export */   arrow: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.arrow),\n/* harmony export */   autoPlacement: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.autoPlacement),\n/* harmony export */   autoUpdate: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.autoUpdate),\n/* harmony export */   computePosition: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.computePosition),\n/* harmony export */   detectOverflow: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.detectOverflow),\n/* harmony export */   flip: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.flip),\n/* harmony export */   getOverflowAncestors: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__.getOverflowAncestors),\n/* harmony export */   hide: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.hide),\n/* harmony export */   inline: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.inline),\n/* harmony export */   inner: () => (/* binding */ inner),\n/* harmony export */   limitShift: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.limitShift),\n/* harmony export */   offset: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.offset),\n/* harmony export */   platform: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.platform),\n/* harmony export */   safePolygon: () => (/* binding */ safePolygon),\n/* harmony export */   shift: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.shift),\n/* harmony export */   size: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.size),\n/* harmony export */   useClick: () => (/* binding */ useClick),\n/* harmony export */   useDelayGroup: () => (/* binding */ useDelayGroup),\n/* harmony export */   useDelayGroupContext: () => (/* binding */ useDelayGroupContext),\n/* harmony export */   useDismiss: () => (/* binding */ useDismiss),\n/* harmony export */   useFloating: () => (/* binding */ useFloating),\n/* harmony export */   useFloatingNodeId: () => (/* binding */ useFloatingNodeId),\n/* harmony export */   useFloatingParentNodeId: () => (/* binding */ useFloatingParentNodeId),\n/* harmony export */   useFloatingPortalNode: () => (/* binding */ useFloatingPortalNode),\n/* harmony export */   useFloatingTree: () => (/* binding */ useFloatingTree),\n/* harmony export */   useFocus: () => (/* binding */ useFocus),\n/* harmony export */   useHover: () => (/* binding */ useHover),\n/* harmony export */   useId: () => (/* binding */ useId),\n/* harmony export */   useInnerOffset: () => (/* binding */ useInnerOffset),\n/* harmony export */   useInteractions: () => (/* binding */ useInteractions),\n/* harmony export */   useListNavigation: () => (/* binding */ useListNavigation),\n/* harmony export */   useMergeRefs: () => (/* binding */ useMergeRefs),\n/* harmony export */   useRole: () => (/* binding */ useRole),\n/* harmony export */   useTransitionStatus: () => (/* binding */ useTransitionStatus),\n/* harmony export */   useTransitionStyles: () => (/* binding */ useTransitionStyles),\n/* harmony export */   useTypeahead: () => (/* binding */ useTypeahead)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var aria_hidden__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! aria-hidden */ \"(ssr)/../node_modules/aria-hidden/dist/es2015/index.js\");\n/* harmony import */ var tabbable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tabbable */ \"(ssr)/../node_modules/tabbable/dist/index.esm.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar index = typeof document !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\n\r\nlet serverHandoffComplete = false;\r\nlet count = 0;\r\nconst genId = () => \"floating-ui-\" + count++;\r\nfunction useFloatingId() {\r\n  const [id, setId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => serverHandoffComplete ? genId() : undefined);\r\n  index(() => {\r\n    if (id == null) {\r\n      setId(genId());\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!serverHandoffComplete) {\r\n      serverHandoffComplete = true;\r\n    }\r\n  }, []);\r\n  return id;\r\n}\r\n\r\n// `toString()` prevents bundlers from trying to `import { useId } from 'react'`\r\nconst useReactId = react__WEBPACK_IMPORTED_MODULE_0__[/*#__PURE__*/'useId'.toString()];\r\n\r\n/**\r\n * Uses React 18's built-in `useId()` when available, or falls back to a\r\n * slightly less performant (requiring a double render) implementation for\r\n * earlier React versions.\r\n * @see https://floating-ui.com/docs/useId\r\n */\r\nconst useId = useReactId || useFloatingId;\r\n\r\nfunction createPubSub() {\r\n  const map = new Map();\r\n  return {\r\n    emit(event, data) {\r\n      var _map$get;\r\n      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach(handler => handler(data));\r\n    },\r\n    on(event, listener) {\r\n      map.set(event, [...(map.get(event) || []), listener]);\r\n    },\r\n    off(event, listener) {\r\n      map.set(event, (map.get(event) || []).filter(l => l !== listener));\r\n    }\r\n  };\r\n}\r\n\r\nconst FloatingNodeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\r\nconst FloatingTreeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\r\nconst useFloatingParentNodeId = () => {\r\n  var _React$useContext;\r\n  return ((_React$useContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\r\n};\r\nconst useFloatingTree = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingTreeContext);\r\n\r\n/**\r\n * Registers a node into the floating tree, returning its id.\r\n */\r\nconst useFloatingNodeId = customParentId => {\r\n  const id = useId();\r\n  const tree = useFloatingTree();\r\n  const reactParentId = useFloatingParentNodeId();\r\n  const parentId = customParentId || reactParentId;\r\n  index(() => {\r\n    const node = {\r\n      id,\r\n      parentId\r\n    };\r\n    tree == null ? void 0 : tree.addNode(node);\r\n    return () => {\r\n      tree == null ? void 0 : tree.removeNode(node);\r\n    };\r\n  }, [tree, id, parentId]);\r\n  return id;\r\n};\r\n\r\n/**\r\n * Provides parent node context for nested floating elements.\r\n * @see https://floating-ui.com/docs/FloatingTree\r\n */\r\nconst FloatingNode = _ref => {\r\n  let {\r\n    children,\r\n    id\r\n  } = _ref;\r\n  const parentId = useFloatingParentNodeId();\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingNodeContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      id,\r\n      parentId\r\n    }), [id, parentId])\r\n  }, children);\r\n};\r\n\r\n/**\r\n * Provides context for nested floating elements when they are not children of\r\n * each other on the DOM (i.e. portalled to a common node, rather than their\r\n * respective parent).\r\n * @see https://floating-ui.com/docs/FloatingTree\r\n */\r\nconst FloatingTree = _ref2 => {\r\n  let {\r\n    children\r\n  } = _ref2;\r\n  const nodesRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\r\n  const addNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    nodesRef.current = [...nodesRef.current, node];\r\n  }, []);\r\n  const removeNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\r\n  }, []);\r\n  const events = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => createPubSub())[0];\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingTreeContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      nodesRef,\r\n      addNode,\r\n      removeNode,\r\n      events\r\n    }), [nodesRef, addNode, removeNode, events])\r\n  }, children);\r\n};\r\n\r\nfunction getDocument(node) {\r\n  return (node == null ? void 0 : node.ownerDocument) || document;\r\n}\r\n\r\n// Avoid Chrome DevTools blue warning.\r\nfunction getPlatform() {\r\n  const uaData = navigator.userAgentData;\r\n  if (uaData != null && uaData.platform) {\r\n    return uaData.platform;\r\n  }\r\n  return navigator.platform;\r\n}\r\nfunction getUserAgent() {\r\n  const uaData = navigator.userAgentData;\r\n  if (uaData && Array.isArray(uaData.brands)) {\r\n    return uaData.brands.map(_ref => {\r\n      let {\r\n        brand,\r\n        version\r\n      } = _ref;\r\n      return brand + \"/\" + version;\r\n    }).join(' ');\r\n  }\r\n  return navigator.userAgent;\r\n}\r\n\r\nfunction getWindow(value) {\r\n  return getDocument(value).defaultView || window;\r\n}\r\nfunction isElement(value) {\r\n  return value ? value instanceof getWindow(value).Element : false;\r\n}\r\nfunction isHTMLElement(value) {\r\n  return value ? value instanceof getWindow(value).HTMLElement : false;\r\n}\r\nfunction isShadowRoot(node) {\r\n  // Browsers without `ShadowRoot` support\r\n  if (typeof ShadowRoot === 'undefined') {\r\n    return false;\r\n  }\r\n  const OwnElement = getWindow(node).ShadowRoot;\r\n  return node instanceof OwnElement || node instanceof ShadowRoot;\r\n}\r\n\r\n// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts\r\nfunction isVirtualClick(event) {\r\n  if (event.mozInputSource === 0 && event.isTrusted) {\r\n    return true;\r\n  }\r\n  const androidRe = /Android/i;\r\n  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {\r\n    return event.type === 'click' && event.buttons === 1;\r\n  }\r\n  return event.detail === 0 && !event.pointerType;\r\n}\r\nfunction isVirtualPointerEvent(event) {\r\n  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== 'mouse' ||\r\n  // iOS VoiceOver returns 0.333• for width/height.\r\n  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;\r\n}\r\nfunction isSafari() {\r\n  // Chrome DevTools does not complain about navigator.vendor\r\n  return /apple/i.test(navigator.vendor);\r\n}\r\nfunction isMac() {\r\n  return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;\r\n}\r\nfunction isMouseLikePointerType(pointerType, strict) {\r\n  // On some Linux machines with Chromium, mouse inputs return a `pointerType`\r\n  // of \"pen\": https://github.com/floating-ui/floating-ui/issues/2015\r\n  const values = ['mouse', 'pen'];\r\n  if (!strict) {\r\n    values.push('', undefined);\r\n  }\r\n  return values.includes(pointerType);\r\n}\r\n\r\nfunction useLatestRef(value) {\r\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\r\n  index(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref;\r\n}\r\n\r\nconst safePolygonIdentifier = 'data-floating-ui-safe-polygon';\r\nfunction getDelay(value, prop, pointerType) {\r\n  if (pointerType && !isMouseLikePointerType(pointerType)) {\r\n    return 0;\r\n  }\r\n  if (typeof value === 'number') {\r\n    return value;\r\n  }\r\n  return value == null ? void 0 : value[prop];\r\n}\r\n/**\r\n * Adds hover event listeners that change the open state, like CSS :hover.\r\n * @see https://floating-ui.com/docs/useHover\r\n */\r\nconst useHover = function (context, _temp) {\r\n  let {\r\n    enabled = true,\r\n    delay = 0,\r\n    handleClose = null,\r\n    mouseOnly = false,\r\n    restMs = 0,\r\n    move = true\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    dataRef,\r\n    events,\r\n    elements: {\r\n      domReference,\r\n      floating\r\n    },\r\n    refs\r\n  } = context;\r\n  const tree = useFloatingTree();\r\n  const parentId = useFloatingParentNodeId();\r\n  const handleCloseRef = useLatestRef(handleClose);\r\n  const delayRef = useLatestRef(delay);\r\n  const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const handlerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const restTimeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const blockMouseMoveRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\r\n  const performedPointerEventsMutationRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const unbindMouseMoveRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(() => {});\r\n  const isHoverOpen = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\r\n    var _dataRef$current$open;\r\n    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\r\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\r\n  }, [dataRef]);\r\n\r\n  // When dismissing before opening, clear the delay timeouts to cancel it\r\n  // from showing.\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    function onDismiss() {\r\n      clearTimeout(timeoutRef.current);\r\n      clearTimeout(restTimeoutRef.current);\r\n      blockMouseMoveRef.current = true;\r\n    }\r\n    events.on('dismiss', onDismiss);\r\n    return () => {\r\n      events.off('dismiss', onDismiss);\r\n    };\r\n  }, [enabled, events]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled || !handleCloseRef.current || !open) {\r\n      return;\r\n    }\r\n    function onLeave() {\r\n      if (isHoverOpen()) {\r\n        onOpenChange(false);\r\n      }\r\n    }\r\n    const html = getDocument(floating).documentElement;\r\n    html.addEventListener('mouseleave', onLeave);\r\n    return () => {\r\n      html.removeEventListener('mouseleave', onLeave);\r\n    };\r\n  }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);\r\n  const closeWithDelay = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (runElseBranch) {\r\n    if (runElseBranch === void 0) {\r\n      runElseBranch = true;\r\n    }\r\n    const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);\r\n    if (closeDelay && !handlerRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = setTimeout(() => onOpenChange(false), closeDelay);\r\n    } else if (runElseBranch) {\r\n      clearTimeout(timeoutRef.current);\r\n      onOpenChange(false);\r\n    }\r\n  }, [delayRef, onOpenChange]);\r\n  const cleanupMouseMoveHandler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\r\n    unbindMouseMoveRef.current();\r\n    handlerRef.current = undefined;\r\n  }, []);\r\n  const clearPointerEvents = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\r\n    if (performedPointerEventsMutationRef.current) {\r\n      const body = getDocument(refs.floating.current).body;\r\n      body.style.pointerEvents = '';\r\n      body.removeAttribute(safePolygonIdentifier);\r\n      performedPointerEventsMutationRef.current = false;\r\n    }\r\n  }, [refs]);\r\n\r\n  // Registering the mouse events on the reference directly to bypass React's\r\n  // delegation system. If the cursor was on a disabled element and then entered\r\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    function isClickLikeOpenEvent() {\r\n      return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\r\n    }\r\n    function onMouseEnter(event) {\r\n      clearTimeout(timeoutRef.current);\r\n      blockMouseMoveRef.current = false;\r\n      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, 'open') === 0) {\r\n        return;\r\n      }\r\n      dataRef.current.openEvent = event;\r\n      const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);\r\n      if (openDelay) {\r\n        timeoutRef.current = setTimeout(() => {\r\n          onOpenChange(true);\r\n        }, openDelay);\r\n      } else {\r\n        onOpenChange(true);\r\n      }\r\n    }\r\n    function onMouseLeave(event) {\r\n      if (isClickLikeOpenEvent()) {\r\n        return;\r\n      }\r\n      unbindMouseMoveRef.current();\r\n      const doc = getDocument(floating);\r\n      clearTimeout(restTimeoutRef.current);\r\n      if (handleCloseRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n        handlerRef.current = handleCloseRef.current({\r\n          ...context,\r\n          tree,\r\n          x: event.clientX,\r\n          y: event.clientY,\r\n          onClose() {\r\n            clearPointerEvents();\r\n            cleanupMouseMoveHandler();\r\n            closeWithDelay();\r\n          }\r\n        });\r\n        const handler = handlerRef.current;\r\n        doc.addEventListener('mousemove', handler);\r\n        unbindMouseMoveRef.current = () => {\r\n          doc.removeEventListener('mousemove', handler);\r\n        };\r\n        return;\r\n      }\r\n      closeWithDelay();\r\n    }\r\n\r\n    // Ensure the floating element closes after scrolling even if the pointer\r\n    // did not move.\r\n    // https://github.com/floating-ui/floating-ui/discussions/1692\r\n    function onScrollMouseLeave(event) {\r\n      if (isClickLikeOpenEvent()) {\r\n        return;\r\n      }\r\n      handleCloseRef.current == null ? void 0 : handleCloseRef.current({\r\n        ...context,\r\n        tree,\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n        onClose() {\r\n          cleanupMouseMoveHandler();\r\n          closeWithDelay();\r\n        }\r\n      })(event);\r\n    }\r\n    if (isElement(domReference)) {\r\n      const ref = domReference;\r\n      open && ref.addEventListener('mouseleave', onScrollMouseLeave);\r\n      floating == null ? void 0 : floating.addEventListener('mouseleave', onScrollMouseLeave);\r\n      move && ref.addEventListener('mousemove', onMouseEnter, {\r\n        once: true\r\n      });\r\n      ref.addEventListener('mouseenter', onMouseEnter);\r\n      ref.addEventListener('mouseleave', onMouseLeave);\r\n      return () => {\r\n        open && ref.removeEventListener('mouseleave', onScrollMouseLeave);\r\n        floating == null ? void 0 : floating.removeEventListener('mouseleave', onScrollMouseLeave);\r\n        move && ref.removeEventListener('mousemove', onMouseEnter);\r\n        ref.removeEventListener('mouseenter', onMouseEnter);\r\n        ref.removeEventListener('mouseleave', onMouseLeave);\r\n      };\r\n    }\r\n  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);\r\n\r\n  // Block pointer-events of every element other than the reference and floating\r\n  // while the floating element is open and has a `handleClose` handler. Also\r\n  // handles nested floating elements.\r\n  // https://github.com/floating-ui/floating-ui/issues/1722\r\n  index(() => {\r\n    var _handleCloseRef$curre;\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {\r\n      const body = getDocument(floating).body;\r\n      body.setAttribute(safePolygonIdentifier, '');\r\n      body.style.pointerEvents = 'none';\r\n      performedPointerEventsMutationRef.current = true;\r\n      if (isElement(domReference) && floating) {\r\n        var _tree$nodesRef$curren, _tree$nodesRef$curren2;\r\n        const ref = domReference;\r\n        const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;\r\n        if (parentFloating) {\r\n          parentFloating.style.pointerEvents = '';\r\n        }\r\n        ref.style.pointerEvents = 'auto';\r\n        floating.style.pointerEvents = 'auto';\r\n        return () => {\r\n          ref.style.pointerEvents = '';\r\n          floating.style.pointerEvents = '';\r\n        };\r\n      }\r\n    }\r\n  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);\r\n  index(() => {\r\n    if (!open) {\r\n      pointerTypeRef.current = undefined;\r\n      cleanupMouseMoveHandler();\r\n      clearPointerEvents();\r\n    }\r\n  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    return () => {\r\n      cleanupMouseMoveHandler();\r\n      clearTimeout(timeoutRef.current);\r\n      clearTimeout(restTimeoutRef.current);\r\n      clearPointerEvents();\r\n    };\r\n  }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    function setPointerRef(event) {\r\n      pointerTypeRef.current = event.pointerType;\r\n    }\r\n    return {\r\n      reference: {\r\n        onPointerDown: setPointerRef,\r\n        onPointerEnter: setPointerRef,\r\n        onMouseMove() {\r\n          if (open || restMs === 0) {\r\n            return;\r\n          }\r\n          clearTimeout(restTimeoutRef.current);\r\n          restTimeoutRef.current = setTimeout(() => {\r\n            if (!blockMouseMoveRef.current) {\r\n              onOpenChange(true);\r\n            }\r\n          }, restMs);\r\n        }\r\n      },\r\n      floating: {\r\n        onMouseEnter() {\r\n          clearTimeout(timeoutRef.current);\r\n        },\r\n        onMouseLeave() {\r\n          events.emit('dismiss', {\r\n            type: 'mouseLeave',\r\n            data: {\r\n              returnFocus: false\r\n            }\r\n          });\r\n          closeWithDelay(false);\r\n        }\r\n      }\r\n    };\r\n  }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);\r\n};\r\n\r\nconst FloatingDelayGroupContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({\r\n  delay: 0,\r\n  initialDelay: 0,\r\n  timeoutMs: 0,\r\n  currentId: null,\r\n  setCurrentId: () => {},\r\n  setState: () => {},\r\n  isInstantPhase: false\r\n});\r\nconst useDelayGroupContext = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingDelayGroupContext);\r\n\r\n/**\r\n * Provides context for a group of floating elements that should share a\r\n * `delay`.\r\n * @see https://floating-ui.com/docs/FloatingDelayGroup\r\n */\r\nconst FloatingDelayGroup = _ref => {\r\n  let {\r\n    children,\r\n    delay,\r\n    timeoutMs = 0\r\n  } = _ref;\r\n  const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer((prev, next) => ({\r\n    ...prev,\r\n    ...next\r\n  }), {\r\n    delay,\r\n    timeoutMs,\r\n    initialDelay: delay,\r\n    currentId: null,\r\n    isInstantPhase: false\r\n  });\r\n  const initialCurrentIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const setCurrentId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(currentId => {\r\n    setState({\r\n      currentId\r\n    });\r\n  }, []);\r\n  index(() => {\r\n    if (state.currentId) {\r\n      if (initialCurrentIdRef.current === null) {\r\n        initialCurrentIdRef.current = state.currentId;\r\n      } else {\r\n        setState({\r\n          isInstantPhase: true\r\n        });\r\n      }\r\n    } else {\r\n      setState({\r\n        isInstantPhase: false\r\n      });\r\n      initialCurrentIdRef.current = null;\r\n    }\r\n  }, [state.currentId]);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingDelayGroupContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      ...state,\r\n      setState,\r\n      setCurrentId\r\n    }), [state, setState, setCurrentId])\r\n  }, children);\r\n};\r\nconst useDelayGroup = (_ref2, _ref3) => {\r\n  let {\r\n    open,\r\n    onOpenChange\r\n  } = _ref2;\r\n  let {\r\n    id\r\n  } = _ref3;\r\n  const {\r\n    currentId,\r\n    setCurrentId,\r\n    initialDelay,\r\n    setState,\r\n    timeoutMs\r\n  } = useDelayGroupContext();\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (currentId) {\r\n      setState({\r\n        delay: {\r\n          open: 1,\r\n          close: getDelay(initialDelay, 'close')\r\n        }\r\n      });\r\n      if (currentId !== id) {\r\n        onOpenChange(false);\r\n      }\r\n    }\r\n  }, [id, onOpenChange, setState, currentId, initialDelay]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    function unset() {\r\n      onOpenChange(false);\r\n      setState({\r\n        delay: initialDelay,\r\n        currentId: null\r\n      });\r\n    }\r\n    if (!open && currentId === id) {\r\n      if (timeoutMs) {\r\n        const timeout = window.setTimeout(unset, timeoutMs);\r\n        return () => {\r\n          clearTimeout(timeout);\r\n        };\r\n      } else {\r\n        unset();\r\n      }\r\n    }\r\n  }, [open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (open) {\r\n      setCurrentId(id);\r\n    }\r\n  }, [open, setCurrentId, id]);\r\n};\r\n\r\nfunction _extends() {\r\n  _extends = Object.assign || function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}\r\n\r\n/**\r\n * Find the real active element. Traverses into shadowRoots.\r\n */\r\nfunction activeElement$1(doc) {\r\n  let activeElement = doc.activeElement;\r\n  while (((_activeElement = activeElement) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {\r\n    var _activeElement, _activeElement$shadow;\r\n    activeElement = activeElement.shadowRoot.activeElement;\r\n  }\r\n  return activeElement;\r\n}\r\n\r\nfunction contains(parent, child) {\r\n  if (!parent || !child) {\r\n    return false;\r\n  }\r\n  const rootNode = child.getRootNode && child.getRootNode();\r\n\r\n  // First, attempt with faster native method\r\n  if (parent.contains(child)) {\r\n    return true;\r\n  }\r\n  // then fallback to custom implementation with Shadow DOM support\r\n  else if (rootNode && isShadowRoot(rootNode)) {\r\n    let next = child;\r\n    do {\r\n      if (next && parent === next) {\r\n        return true;\r\n      }\r\n      // @ts-ignore\r\n      next = next.parentNode || next.host;\r\n    } while (next);\r\n  }\r\n\r\n  // Give up, the result is false\r\n  return false;\r\n}\r\n\r\nlet rafId = 0;\r\nfunction enqueueFocus(el, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    preventScroll = false,\r\n    cancelPrevious = true,\r\n    sync = false\r\n  } = options;\r\n  cancelPrevious && cancelAnimationFrame(rafId);\r\n  const exec = () => el == null ? void 0 : el.focus({\r\n    preventScroll\r\n  });\r\n  if (sync) {\r\n    exec();\r\n  } else {\r\n    rafId = requestAnimationFrame(exec);\r\n  }\r\n}\r\n\r\nfunction getAncestors(nodes, id) {\r\n  var _nodes$find;\r\n  let allAncestors = [];\r\n  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;\r\n  while (currentParentId) {\r\n    const currentNode = nodes.find(node => node.id === currentParentId);\r\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\r\n    if (currentNode) {\r\n      allAncestors = allAncestors.concat(currentNode);\r\n    }\r\n  }\r\n  return allAncestors;\r\n}\r\n\r\nfunction getChildren(nodes, id) {\r\n  let allChildren = nodes.filter(node => {\r\n    var _node$context;\r\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\r\n  }) || [];\r\n  let currentChildren = allChildren;\r\n  while (currentChildren.length) {\r\n    currentChildren = nodes.filter(node => {\r\n      var _currentChildren;\r\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\r\n        var _node$context2;\r\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\r\n      });\r\n    }) || [];\r\n    allChildren = allChildren.concat(currentChildren);\r\n  }\r\n  return allChildren;\r\n}\r\n\r\nfunction getTarget(event) {\r\n  if ('composedPath' in event) {\r\n    return event.composedPath()[0];\r\n  }\r\n\r\n  // TS thinks `event` is of type never as it assumes all browsers support\r\n  // `composedPath()`, but browsers without shadow DOM don't.\r\n  return event.target;\r\n}\r\n\r\nconst TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\r\nfunction isTypeableElement(element) {\r\n  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);\r\n}\r\n\r\nfunction stopEvent(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n\r\nconst getTabbableOptions = () => ({\r\n  getShadowRoot: true,\r\n  displayCheck:\r\n  // JSDOM does not support the `tabbable` library. To solve this we can\r\n  // check if `ResizeObserver` is a real function (not polyfilled), which\r\n  // determines if the current environment is JSDOM-like.\r\n  typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'\r\n});\r\nfunction getTabbableIn(container, direction) {\r\n  const allTabbable = (0,tabbable__WEBPACK_IMPORTED_MODULE_5__.tabbable)(container, getTabbableOptions());\r\n  if (direction === 'prev') {\r\n    allTabbable.reverse();\r\n  }\r\n  const activeIndex = allTabbable.indexOf(activeElement$1(getDocument(container)));\r\n  const nextTabbableElements = allTabbable.slice(activeIndex + 1);\r\n  return nextTabbableElements[0];\r\n}\r\nfunction getNextTabbable() {\r\n  return getTabbableIn(document.body, 'next');\r\n}\r\nfunction getPreviousTabbable() {\r\n  return getTabbableIn(document.body, 'prev');\r\n}\r\nfunction isOutsideEvent(event, container) {\r\n  const containerElement = container || event.currentTarget;\r\n  const relatedTarget = event.relatedTarget;\r\n  return !relatedTarget || !contains(containerElement, relatedTarget);\r\n}\r\nfunction disableFocusInside(container) {\r\n  const tabbableElements = (0,tabbable__WEBPACK_IMPORTED_MODULE_5__.tabbable)(container, getTabbableOptions());\r\n  tabbableElements.forEach(element => {\r\n    element.dataset.tabindex = element.getAttribute('tabindex') || '';\r\n    element.setAttribute('tabindex', '-1');\r\n  });\r\n}\r\nfunction enableFocusInside(container) {\r\n  const elements = container.querySelectorAll('[data-tabindex]');\r\n  elements.forEach(element => {\r\n    const tabindex = element.dataset.tabindex;\r\n    delete element.dataset.tabindex;\r\n    if (tabindex) {\r\n      element.setAttribute('tabindex', tabindex);\r\n    } else {\r\n      element.removeAttribute('tabindex');\r\n    }\r\n  });\r\n}\r\n\r\n// `toString()` prevents bundlers from trying to `import { useInsertionEffect } from 'react'`\r\nconst useInsertionEffect = react__WEBPACK_IMPORTED_MODULE_0__[/*#__PURE__*/'useInsertionEffect'.toString()];\r\nconst useSafeInsertionEffect = useInsertionEffect || (fn => fn());\r\nfunction useEvent(callback) {\r\n  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(() => {\r\n    if (true) {\r\n      throw new Error('Cannot call an event handler while rendering.');\r\n    }\r\n  });\r\n  useSafeInsertionEffect(() => {\r\n    ref.current = callback;\r\n  });\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function () {\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    return ref.current == null ? void 0 : ref.current(...args);\r\n  }, []);\r\n}\r\n\r\n// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:\r\n// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx\r\n\r\nconst HIDDEN_STYLES = {\r\n  border: 0,\r\n  clip: 'rect(0 0 0 0)',\r\n  height: '1px',\r\n  margin: '-1px',\r\n  overflow: 'hidden',\r\n  padding: 0,\r\n  position: 'fixed',\r\n  whiteSpace: 'nowrap',\r\n  width: '1px',\r\n  top: 0,\r\n  left: 0\r\n};\r\nlet activeElement;\r\nlet timeoutId;\r\nfunction setActiveElementOnTab(event) {\r\n  if (event.key === 'Tab') {\r\n    activeElement = event.target;\r\n    clearTimeout(timeoutId);\r\n  }\r\n}\r\nfunction isTabFocus(event) {\r\n  const result = activeElement === event.relatedTarget;\r\n  activeElement = event.relatedTarget;\r\n  clearTimeout(timeoutId);\r\n  return result;\r\n}\r\nconst FocusGuard = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FocusGuard(props, ref) {\r\n  const onFocus = useEvent(props.onFocus);\r\n  const [role, setRole] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\r\n  index(() => {\r\n    if (isSafari()) {\r\n      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\r\n      // on VoiceOver does trigger the onFocus event, so we can use the focus\r\n      // trap element. On Safari, only buttons trigger the onFocus event.\r\n      // NB: \"group\" role in the Sandbox no longer appears to work, must be a\r\n      // button role.\r\n      setRole('button');\r\n    }\r\n    document.addEventListener('keydown', setActiveElementOnTab);\r\n    return () => {\r\n      document.removeEventListener('keydown', setActiveElementOnTab);\r\n    };\r\n  }, []);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", _extends({}, props, {\r\n    ref: ref,\r\n    tabIndex: 0\r\n    // Role is only for VoiceOver\r\n    ,\r\n    role: role,\r\n    \"aria-hidden\": role ? undefined : true,\r\n    \"data-floating-ui-focus-guard\": \"\",\r\n    style: HIDDEN_STYLES,\r\n    onFocus: event => {\r\n      if (isSafari() && isMac() && !isTabFocus(event)) {\r\n        // On macOS we need to wait a little bit before moving\r\n        // focus again.\r\n        event.persist();\r\n        timeoutId = window.setTimeout(() => {\r\n          onFocus(event);\r\n        }, 50);\r\n      } else {\r\n        onFocus(event);\r\n      }\r\n    }\r\n  }));\r\n});\r\n\r\nconst PortalContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\r\nconst useFloatingPortalNode = function (_temp) {\r\n  let {\r\n    id,\r\n    enabled = true\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const [portalEl, setPortalEl] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n  const uniqueId = useId();\r\n  const portalContext = usePortalContext();\r\n  index(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    const rootNode = id ? document.getElementById(id) : null;\r\n    if (rootNode) {\r\n      rootNode.setAttribute('data-floating-ui-portal', '');\r\n      setPortalEl(rootNode);\r\n    } else {\r\n      const newPortalEl = document.createElement('div');\r\n      if (id !== '') {\r\n        newPortalEl.id = id || uniqueId;\r\n      }\r\n      newPortalEl.setAttribute('data-floating-ui-portal', '');\r\n      setPortalEl(newPortalEl);\r\n      const container = (portalContext == null ? void 0 : portalContext.portalNode) || document.body;\r\n      container.appendChild(newPortalEl);\r\n      return () => {\r\n        container.removeChild(newPortalEl);\r\n      };\r\n    }\r\n  }, [id, portalContext, uniqueId, enabled]);\r\n  return portalEl;\r\n};\r\n\r\n/**\r\n * Portals your floating element outside of the main app node.\r\n * @see https://floating-ui.com/docs/FloatingPortal\r\n */\r\nconst FloatingPortal = _ref => {\r\n  let {\r\n    children,\r\n    id,\r\n    root = null,\r\n    preserveTabOrder = true\r\n  } = _ref;\r\n  const portalNode = useFloatingPortalNode({\r\n    id,\r\n    enabled: !root\r\n  });\r\n  const [focusManagerState, setFocusManagerState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n  const beforeOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const afterOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const beforeInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const afterInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const shouldRenderGuards =\r\n  // The FocusManager and therefore floating element are currently open/\r\n  // rendered.\r\n  !!focusManagerState &&\r\n  // Guards are only for non-modal focus management.\r\n  !focusManagerState.modal && !!(root || portalNode) && preserveTabOrder;\r\n\r\n  // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {\r\n      return;\r\n    }\r\n\r\n    // Make sure elements inside the portal element are tabbable only when the\r\n    // portal has already been focused, either by tabbing into a focus trap\r\n    // element outside or using the mouse.\r\n    function onFocus(event) {\r\n      if (portalNode && isOutsideEvent(event)) {\r\n        const focusing = event.type === 'focusin';\r\n        const manageFocus = focusing ? enableFocusInside : disableFocusInside;\r\n        manageFocus(portalNode);\r\n      }\r\n    }\r\n    // Listen to the event on the capture phase so they run before the focus\r\n    // trap elements onFocus prop is called.\r\n    portalNode.addEventListener('focusin', onFocus, true);\r\n    portalNode.addEventListener('focusout', onFocus, true);\r\n    return () => {\r\n      portalNode.removeEventListener('focusin', onFocus, true);\r\n      portalNode.removeEventListener('focusout', onFocus, true);\r\n    };\r\n  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(PortalContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      preserveTabOrder,\r\n      beforeOutsideRef,\r\n      afterOutsideRef,\r\n      beforeInsideRef,\r\n      afterInsideRef,\r\n      portalNode,\r\n      setFocusManagerState\r\n    }), [preserveTabOrder, portalNode])\r\n  }, shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\r\n    \"data-type\": \"outside\",\r\n    ref: beforeOutsideRef,\r\n    onFocus: event => {\r\n      if (isOutsideEvent(event, portalNode)) {\r\n        var _beforeInsideRef$curr;\r\n        (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();\r\n      } else {\r\n        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\r\n        prevTabbable == null ? void 0 : prevTabbable.focus();\r\n      }\r\n    }\r\n  }), shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\r\n    \"aria-owns\": portalNode.id,\r\n    style: HIDDEN_STYLES\r\n  }), root ? /*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(children, root) : portalNode ? /*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(children, portalNode) : null, shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\r\n    \"data-type\": \"outside\",\r\n    ref: afterOutsideRef,\r\n    onFocus: event => {\r\n      if (isOutsideEvent(event, portalNode)) {\r\n        var _afterInsideRef$curre;\r\n        (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();\r\n      } else {\r\n        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\r\n        nextTabbable == null ? void 0 : nextTabbable.focus();\r\n        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false));\r\n      }\r\n    }\r\n  }));\r\n};\r\nconst usePortalContext = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(PortalContext);\r\n\r\nconst VisuallyHiddenDismiss = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function VisuallyHiddenDismiss(props, ref) {\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", _extends({}, props, {\r\n    type: \"button\",\r\n    ref: ref,\r\n    tabIndex: -1,\r\n    style: HIDDEN_STYLES\r\n  }));\r\n});\r\n/**\r\n * Provides focus management for the floating element.\r\n * @see https://floating-ui.com/docs/FloatingFocusManager\r\n */\r\nfunction FloatingFocusManager(_ref) {\r\n  let {\r\n    context,\r\n    children,\r\n    order = ['content'],\r\n    guards = true,\r\n    initialFocus = 0,\r\n    returnFocus = true,\r\n    modal = true,\r\n    visuallyHiddenDismiss = false,\r\n    closeOnFocusOut = true\r\n  } = _ref;\r\n  const {\r\n    refs,\r\n    nodeId,\r\n    onOpenChange,\r\n    events,\r\n    dataRef,\r\n    elements: {\r\n      domReference,\r\n      floating\r\n    }\r\n  } = context;\r\n  const orderRef = useLatestRef(order);\r\n  const tree = useFloatingTree();\r\n  const portalContext = usePortalContext();\r\n  const [tabbableContentLength, setTabbableContentLength] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n\r\n  // Controlled by `useListNavigation`.\r\n  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;\r\n  const startDismissButtonRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const endDismissButtonRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const preventReturnFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const previouslyFocusedElementRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const isPointerDownRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const isInsidePortal = portalContext != null;\r\n\r\n  // If the reference is a combobox and is typeable (e.g. input/textarea),\r\n  // there are different focus semantics. The guards should not be rendered, but\r\n  // aria-hidden should be applied to all nodes still. Further, the visually\r\n  // hidden dismiss button should only appear at the end of the list, not the\r\n  // start.\r\n  const isTypeableCombobox = domReference && domReference.getAttribute('role') === 'combobox' && isTypeableElement(domReference);\r\n  const getTabbableContent = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (container) {\r\n    if (container === void 0) {\r\n      container = floating;\r\n    }\r\n    return container ? (0,tabbable__WEBPACK_IMPORTED_MODULE_5__.tabbable)(container, getTabbableOptions()) : [];\r\n  }, [floating]);\r\n  const getTabbableElements = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(container => {\r\n    const content = getTabbableContent(container);\r\n    return orderRef.current.map(type => {\r\n      if (domReference && type === 'reference') {\r\n        return domReference;\r\n      }\r\n      if (floating && type === 'floating') {\r\n        return floating;\r\n      }\r\n      return content;\r\n    }).filter(Boolean).flat();\r\n  }, [domReference, floating, orderRef, getTabbableContent]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!modal) {\r\n      return;\r\n    }\r\n    function onKeyDown(event) {\r\n      if (event.key === 'Tab') {\r\n        // The focus guards have nothing to focus, so we need to stop the event.\r\n        if (getTabbableContent().length === 0 && !isTypeableCombobox) {\r\n          stopEvent(event);\r\n        }\r\n        const els = getTabbableElements();\r\n        const target = getTarget(event);\r\n        if (orderRef.current[0] === 'reference' && target === domReference) {\r\n          stopEvent(event);\r\n          if (event.shiftKey) {\r\n            enqueueFocus(els[els.length - 1]);\r\n          } else {\r\n            enqueueFocus(els[1]);\r\n          }\r\n        }\r\n        if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {\r\n          stopEvent(event);\r\n          enqueueFocus(els[0]);\r\n        }\r\n      }\r\n    }\r\n    const doc = getDocument(floating);\r\n    doc.addEventListener('keydown', onKeyDown);\r\n    return () => {\r\n      doc.removeEventListener('keydown', onKeyDown);\r\n    };\r\n  }, [domReference, floating, modal, orderRef, refs, isTypeableCombobox, getTabbableContent, getTabbableElements]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!closeOnFocusOut) {\r\n      return;\r\n    }\r\n\r\n    // In Safari, buttons lose focus when pressing them.\r\n    function handlePointerDown() {\r\n      isPointerDownRef.current = true;\r\n      setTimeout(() => {\r\n        isPointerDownRef.current = false;\r\n      });\r\n    }\r\n    function handleFocusOutside(event) {\r\n      const relatedTarget = event.relatedTarget;\r\n      const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute('data-floating-ui-focus-guard') || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {\r\n        var _node$context, _node$context2;\r\n        return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\r\n      }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {\r\n        var _node$context3, _node$context4;\r\n        return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;\r\n      })));\r\n\r\n      // Focus did not move inside the floating tree, and there are no tabbable\r\n      // portal guards to handle closing.\r\n      if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&\r\n      // Fix React 18 Strict Mode returnFocus due to double rendering.\r\n      relatedTarget !== previouslyFocusedElementRef.current) {\r\n        preventReturnFocusRef.current = true;\r\n        // On iOS VoiceOver, dismissing the nested submenu will cause the\r\n        // first item of the list to receive focus. Delaying it appears to fix\r\n        // the issue.\r\n        setTimeout(() => onOpenChange(false));\r\n      }\r\n    }\r\n    if (floating && isHTMLElement(domReference)) {\r\n      domReference.addEventListener('focusout', handleFocusOutside);\r\n      domReference.addEventListener('pointerdown', handlePointerDown);\r\n      !modal && floating.addEventListener('focusout', handleFocusOutside);\r\n      return () => {\r\n        domReference.removeEventListener('focusout', handleFocusOutside);\r\n        domReference.removeEventListener('pointerdown', handlePointerDown);\r\n        !modal && floating.removeEventListener('focusout', handleFocusOutside);\r\n      };\r\n    }\r\n  }, [domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    var _portalContext$portal;\r\n    // Don't hide portals nested within the parent portal.\r\n    const portalNodes = Array.from((portalContext == null ? void 0 : (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll('[data-floating-ui-portal]')) || []);\r\n    function getDismissButtons() {\r\n      return [startDismissButtonRef.current, endDismissButtonRef.current].filter(Boolean);\r\n    }\r\n    if (floating && modal) {\r\n      const insideNodes = [floating, ...portalNodes, ...getDismissButtons()];\r\n      const cleanup = (0,aria_hidden__WEBPACK_IMPORTED_MODULE_6__.hideOthers)(orderRef.current.includes('reference') || isTypeableCombobox ? insideNodes.concat(domReference || []) : insideNodes);\r\n      return () => {\r\n        cleanup();\r\n      };\r\n    }\r\n  }, [domReference, floating, modal, orderRef, portalContext, isTypeableCombobox]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (modal && !guards && floating) {\r\n      const tabIndexValues = [];\r\n      const options = getTabbableOptions();\r\n      const allTabbable = (0,tabbable__WEBPACK_IMPORTED_MODULE_5__.tabbable)(getDocument(floating).body, options);\r\n      const floatingTabbable = getTabbableElements();\r\n\r\n      // Exclude all tabbable elements that are part of the order\r\n      const elements = allTabbable.filter(el => !floatingTabbable.includes(el));\r\n      elements.forEach((el, i) => {\r\n        tabIndexValues[i] = el.getAttribute('tabindex');\r\n        el.setAttribute('tabindex', '-1');\r\n      });\r\n      return () => {\r\n        elements.forEach((el, i) => {\r\n          const value = tabIndexValues[i];\r\n          if (value == null) {\r\n            el.removeAttribute('tabindex');\r\n          } else {\r\n            el.setAttribute('tabindex', value);\r\n          }\r\n        });\r\n      };\r\n    }\r\n  }, [floating, modal, guards, getTabbableElements]);\r\n  index(() => {\r\n    if (!floating) return;\r\n    const doc = getDocument(floating);\r\n    let returnFocusValue = returnFocus;\r\n    let preventReturnFocusScroll = false;\r\n    const previouslyFocusedElement = activeElement$1(doc);\r\n    const contextData = dataRef.current;\r\n    previouslyFocusedElementRef.current = previouslyFocusedElement;\r\n    const focusableElements = getTabbableElements(floating);\r\n    const elToFocus = (typeof initialFocus === 'number' ? focusableElements[initialFocus] : initialFocus.current) || floating;\r\n\r\n    // If the `useListNavigation` hook is active, always ignore `initialFocus`\r\n    // because it has its own handling of the initial focus.\r\n    !ignoreInitialFocus && enqueueFocus(elToFocus, {\r\n      preventScroll: elToFocus === floating\r\n    });\r\n\r\n    // Dismissing via outside press should always ignore `returnFocus` to\r\n    // prevent unwanted scrolling.\r\n    function onDismiss(payload) {\r\n      if (payload.type === 'escapeKey' && refs.domReference.current) {\r\n        previouslyFocusedElementRef.current = refs.domReference.current;\r\n      }\r\n      if (['referencePress', 'escapeKey'].includes(payload.type)) {\r\n        return;\r\n      }\r\n      const returnFocus = payload.data.returnFocus;\r\n      if (typeof returnFocus === 'object') {\r\n        returnFocusValue = true;\r\n        preventReturnFocusScroll = returnFocus.preventScroll;\r\n      } else {\r\n        returnFocusValue = returnFocus;\r\n      }\r\n    }\r\n    events.on('dismiss', onDismiss);\r\n    return () => {\r\n      events.off('dismiss', onDismiss);\r\n      if (contains(floating, activeElement$1(doc)) && refs.domReference.current) {\r\n        previouslyFocusedElementRef.current = refs.domReference.current;\r\n      }\r\n      if (returnFocusValue && isHTMLElement(previouslyFocusedElementRef.current) && !preventReturnFocusRef.current) {\r\n        // `isPointerDownRef.current` to avoid the focus ring from appearing on\r\n        // the reference element when click-toggling it.\r\n        if (!refs.domReference.current || isPointerDownRef.current) {\r\n          enqueueFocus(previouslyFocusedElementRef.current, {\r\n            // When dismissing nested floating elements, by the time the rAF has\r\n            // executed, the menus will all have been unmounted. When they try\r\n            // to get focused, the calls get ignored — leaving the root\r\n            // reference focused as desired.\r\n            cancelPrevious: false,\r\n            preventScroll: preventReturnFocusScroll\r\n          });\r\n        } else {\r\n          var _previouslyFocusedEle;\r\n          // If the user has specified a `keydown` listener that calls\r\n          // setOpen(false) (e.g. selecting an item and closing the floating\r\n          // element), then sync return focus causes `useClick` to immediately\r\n          // re-open it, unless they call `event.preventDefault()` in the\r\n          // `keydown` listener. This helps keep backwards compatibility with\r\n          // older examples.\r\n          contextData.__syncReturnFocus = true;\r\n\r\n          // In Safari, `useListNavigation` moves focus sync, so making this\r\n          // sync ensures the initial item remains focused despite this being\r\n          // invoked in Strict Mode due to double-invoked useEffects. This also\r\n          // has the positive side effect of closing a modally focus-managed\r\n          // <Menu> on `Tab` keydown to move naturally to the next focusable\r\n          // element.\r\n          (_previouslyFocusedEle = previouslyFocusedElementRef.current) == null ? void 0 : _previouslyFocusedEle.focus({\r\n            preventScroll: preventReturnFocusScroll\r\n          });\r\n          setTimeout(() => {\r\n            // This isn't an actual property the user should access, make sure\r\n            // it doesn't persist.\r\n            delete contextData.__syncReturnFocus;\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }, [floating, getTabbableElements, initialFocus, returnFocus, dataRef, refs, events, ignoreInitialFocus]);\r\n\r\n  // Synchronize the `context` & `modal` value to the FloatingPortal context.\r\n  // It will decide whether or not it needs to render its own guards.\r\n  index(() => {\r\n    if (!portalContext) return;\r\n    portalContext.setFocusManagerState({\r\n      ...context,\r\n      modal,\r\n      closeOnFocusOut\r\n      // Not concerned about the <RT> generic type.\r\n    });\r\n\r\n    return () => {\r\n      portalContext.setFocusManagerState(null);\r\n    };\r\n  }, [portalContext, modal, closeOnFocusOut, context]);\r\n  index(() => {\r\n    if (ignoreInitialFocus || !floating) return;\r\n    function setState() {\r\n      setTabbableContentLength(getTabbableContent().length);\r\n    }\r\n    setState();\r\n    if (typeof MutationObserver === 'function') {\r\n      const observer = new MutationObserver(setState);\r\n      observer.observe(floating, {\r\n        childList: true,\r\n        subtree: true\r\n      });\r\n      return () => {\r\n        observer.disconnect();\r\n      };\r\n    }\r\n  }, [floating, getTabbableContent, ignoreInitialFocus, refs]);\r\n  const shouldRenderGuards = guards && (isInsidePortal || modal) && !isTypeableCombobox;\r\n  function renderDismissButton(location) {\r\n    return visuallyHiddenDismiss && modal ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(VisuallyHiddenDismiss, {\r\n      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,\r\n      onClick: () => onOpenChange(false)\r\n    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss') : null;\r\n  }\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, shouldRenderGuards && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\r\n    \"data-type\": \"inside\",\r\n    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,\r\n    onFocus: event => {\r\n      if (modal) {\r\n        const els = getTabbableElements();\r\n        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);\r\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\r\n        preventReturnFocusRef.current = false;\r\n        if (isOutsideEvent(event, portalContext.portalNode)) {\r\n          const nextTabbable = getNextTabbable() || domReference;\r\n          nextTabbable == null ? void 0 : nextTabbable.focus();\r\n        } else {\r\n          var _portalContext$before;\r\n          (_portalContext$before = portalContext.beforeOutsideRef.current) == null ? void 0 : _portalContext$before.focus();\r\n        }\r\n      }\r\n    }\r\n  }), isTypeableCombobox ? null : renderDismissButton('start'), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, tabbableContentLength === 0 || order.includes('floating') ? {\r\n    tabIndex: 0\r\n  } : {}), renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\r\n    \"data-type\": \"inside\",\r\n    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,\r\n    onFocus: event => {\r\n      if (modal) {\r\n        enqueueFocus(getTabbableElements()[0]);\r\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\r\n        preventReturnFocusRef.current = true;\r\n        if (isOutsideEvent(event, portalContext.portalNode)) {\r\n          const prevTabbable = getPreviousTabbable() || domReference;\r\n          prevTabbable == null ? void 0 : prevTabbable.focus();\r\n        } else {\r\n          var _portalContext$afterO;\r\n          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null ? void 0 : _portalContext$afterO.focus();\r\n        }\r\n      }\r\n    }\r\n  }));\r\n}\r\n\r\nconst identifier = 'data-floating-ui-scroll-lock';\r\n\r\n/**\r\n * Provides base styling for a fixed overlay element to dim content or block\r\n * pointer events behind a floating element.\r\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\r\n * @see https://floating-ui.com/docs/FloatingOverlay\r\n */\r\nconst FloatingOverlay = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FloatingOverlay(_ref, ref) {\r\n  let {\r\n    lockScroll = false,\r\n    ...rest\r\n  } = _ref;\r\n  index(() => {\r\n    var _window$visualViewpor, _window$visualViewpor2;\r\n    if (!lockScroll) {\r\n      return;\r\n    }\r\n    const alreadyLocked = document.body.hasAttribute(identifier);\r\n    if (alreadyLocked) {\r\n      return;\r\n    }\r\n    document.body.setAttribute(identifier, '');\r\n\r\n    // RTL <body> scrollbar\r\n    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\r\n    const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\r\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\r\n\r\n    // Only iOS doesn't respect `overflow: hidden` on document.body, and this\r\n    // technique has fewer side effects.\r\n    if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {\r\n      Object.assign(document.body.style, {\r\n        overflow: 'hidden',\r\n        [paddingProp]: scrollbarWidth + \"px\"\r\n      });\r\n      return () => {\r\n        document.body.removeAttribute(identifier);\r\n        Object.assign(document.body.style, {\r\n          overflow: '',\r\n          [paddingProp]: ''\r\n        });\r\n      };\r\n    }\r\n\r\n    // iOS 12 does not support `visualViewport`.\r\n    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\r\n    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\r\n    const scrollX = window.pageXOffset;\r\n    const scrollY = window.pageYOffset;\r\n    Object.assign(document.body.style, {\r\n      position: 'fixed',\r\n      overflow: 'hidden',\r\n      top: -(scrollY - Math.floor(offsetTop)) + \"px\",\r\n      left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\r\n      right: '0',\r\n      [paddingProp]: scrollbarWidth + \"px\"\r\n    });\r\n    return () => {\r\n      Object.assign(document.body.style, {\r\n        position: '',\r\n        overflow: '',\r\n        top: '',\r\n        left: '',\r\n        right: '',\r\n        [paddingProp]: ''\r\n      });\r\n      document.body.removeAttribute(identifier);\r\n      window.scrollTo(scrollX, scrollY);\r\n    };\r\n  }, [lockScroll]);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", _extends({\r\n    ref: ref\r\n  }, rest, {\r\n    style: {\r\n      position: 'fixed',\r\n      overflow: 'auto',\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      ...rest.style\r\n    }\r\n  }));\r\n});\r\n\r\nfunction isButtonTarget(event) {\r\n  return isHTMLElement(event.target) && event.target.tagName === 'BUTTON';\r\n}\r\nfunction isSpaceIgnored(element) {\r\n  return isTypeableElement(element);\r\n}\r\n/**\r\n * Adds click event listeners that change the open state.\r\n * @see https://floating-ui.com/docs/useClick\r\n */\r\nconst useClick = function (_ref, _temp) {\r\n  let {\r\n    open,\r\n    onOpenChange,\r\n    dataRef,\r\n    elements: {\r\n      domReference\r\n    }\r\n  } = _ref;\r\n  let {\r\n    enabled = true,\r\n    event: eventOption = 'click',\r\n    toggle = true,\r\n    ignoreMouse = false,\r\n    keyboardHandlers = true\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    return {\r\n      reference: {\r\n        onPointerDown(event) {\r\n          pointerTypeRef.current = event.pointerType;\r\n        },\r\n        onMouseDown(event) {\r\n          // Ignore all buttons except for the \"main\" button.\r\n          // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\r\n          if (event.button !== 0) {\r\n            return;\r\n          }\r\n          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {\r\n            return;\r\n          }\r\n          if (eventOption === 'click') {\r\n            return;\r\n          }\r\n          if (open) {\r\n            if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {\r\n              onOpenChange(false);\r\n            }\r\n          } else {\r\n            // Prevent stealing focus from the floating element\r\n            event.preventDefault();\r\n            onOpenChange(true);\r\n          }\r\n          dataRef.current.openEvent = event.nativeEvent;\r\n        },\r\n        onClick(event) {\r\n          if (dataRef.current.__syncReturnFocus) {\r\n            return;\r\n          }\r\n          if (eventOption === 'mousedown' && pointerTypeRef.current) {\r\n            pointerTypeRef.current = undefined;\r\n            return;\r\n          }\r\n          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {\r\n            return;\r\n          }\r\n          if (open) {\r\n            if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {\r\n              onOpenChange(false);\r\n            }\r\n          } else {\r\n            onOpenChange(true);\r\n          }\r\n          dataRef.current.openEvent = event.nativeEvent;\r\n        },\r\n        onKeyDown(event) {\r\n          pointerTypeRef.current = undefined;\r\n          if (!keyboardHandlers) {\r\n            return;\r\n          }\r\n          if (isButtonTarget(event)) {\r\n            return;\r\n          }\r\n          if (event.key === ' ' && !isSpaceIgnored(domReference)) {\r\n            // Prevent scrolling\r\n            event.preventDefault();\r\n          }\r\n          if (event.key === 'Enter') {\r\n            if (open) {\r\n              if (toggle) {\r\n                onOpenChange(false);\r\n              }\r\n            } else {\r\n              onOpenChange(true);\r\n            }\r\n          }\r\n        },\r\n        onKeyUp(event) {\r\n          if (!keyboardHandlers) {\r\n            return;\r\n          }\r\n          if (isButtonTarget(event) || isSpaceIgnored(domReference)) {\r\n            return;\r\n          }\r\n          if (event.key === ' ') {\r\n            if (open) {\r\n              if (toggle) {\r\n                onOpenChange(false);\r\n              }\r\n            } else {\r\n              onOpenChange(true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);\r\n};\r\n\r\n/**\r\n * Check whether the event.target is within the provided node. Uses event.composedPath if available for custom element support.\r\n *\r\n * @param event The event whose target/composedPath to check\r\n * @param node The node to check against\r\n * @returns Whether the event.target/composedPath is within the node.\r\n */\r\nfunction isEventTargetWithin(event, node) {\r\n  if (node == null) {\r\n    return false;\r\n  }\r\n  if ('composedPath' in event) {\r\n    return event.composedPath().includes(node);\r\n  }\r\n\r\n  // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\r\n  const e = event;\r\n  return e.target != null && node.contains(e.target);\r\n}\r\n\r\nconst bubbleHandlerKeys = {\r\n  pointerdown: 'onPointerDown',\r\n  mousedown: 'onMouseDown',\r\n  click: 'onClick'\r\n};\r\nconst captureHandlerKeys = {\r\n  pointerdown: 'onPointerDownCapture',\r\n  mousedown: 'onMouseDownCapture',\r\n  click: 'onClickCapture'\r\n};\r\nconst normalizeBubblesProp = function (bubbles) {\r\n  var _bubbles$escapeKey, _bubbles$outsidePress;\r\n  if (bubbles === void 0) {\r\n    bubbles = true;\r\n  }\r\n  return {\r\n    escapeKeyBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$escapeKey = bubbles.escapeKey) != null ? _bubbles$escapeKey : true,\r\n    outsidePressBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$outsidePress = bubbles.outsidePress) != null ? _bubbles$outsidePress : true\r\n  };\r\n};\r\n/**\r\n * Adds listeners that dismiss (close) the floating element.\r\n * @see https://floating-ui.com/docs/useDismiss\r\n */\r\nconst useDismiss = function (_ref, _temp) {\r\n  let {\r\n    open,\r\n    onOpenChange,\r\n    events,\r\n    nodeId,\r\n    elements: {\r\n      reference,\r\n      domReference,\r\n      floating\r\n    },\r\n    dataRef\r\n  } = _ref;\r\n  let {\r\n    enabled = true,\r\n    escapeKey = true,\r\n    outsidePress: unstable_outsidePress = true,\r\n    outsidePressEvent = 'pointerdown',\r\n    referencePress = false,\r\n    referencePressEvent = 'pointerdown',\r\n    ancestorScroll = false,\r\n    bubbles = true\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const tree = useFloatingTree();\r\n  const nested = useFloatingParentNodeId() != null;\r\n  const outsidePressFn = useEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);\r\n  const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;\r\n  const insideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const {\r\n    escapeKeyBubbles,\r\n    outsidePressBubbles\r\n  } = normalizeBubblesProp(bubbles);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!open || !enabled) {\r\n      return;\r\n    }\r\n    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\r\n    dataRef.current.__outsidePressBubbles = outsidePressBubbles;\r\n    function onKeyDown(event) {\r\n      if (event.key === 'Escape') {\r\n        const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\r\n        if (children.length > 0) {\r\n          let shouldDismiss = true;\r\n          children.forEach(child => {\r\n            var _child$context;\r\n            if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\r\n              shouldDismiss = false;\r\n              return;\r\n            }\r\n          });\r\n          if (!shouldDismiss) {\r\n            return;\r\n          }\r\n        }\r\n        events.emit('dismiss', {\r\n          type: 'escapeKey',\r\n          data: {\r\n            returnFocus: {\r\n              preventScroll: false\r\n            }\r\n          }\r\n        });\r\n        onOpenChange(false);\r\n      }\r\n    }\r\n    function onOutsidePress(event) {\r\n      // Given developers can stop the propagation of the synthetic event,\r\n      // we can only be confident with a positive value.\r\n      const insideReactTree = insideReactTreeRef.current;\r\n      insideReactTreeRef.current = false;\r\n      if (insideReactTree) {\r\n        return;\r\n      }\r\n      if (typeof outsidePress === 'function' && !outsidePress(event)) {\r\n        return;\r\n      }\r\n      const target = getTarget(event);\r\n\r\n      // Check if the click occurred on the scrollbar\r\n      if (isHTMLElement(target) && floating) {\r\n        const win = floating.ownerDocument.defaultView || window;\r\n        const canScrollX = target.scrollWidth > target.clientWidth;\r\n        const canScrollY = target.scrollHeight > target.clientHeight;\r\n        let xCond = canScrollY && event.offsetX > target.clientWidth;\r\n\r\n        // In some browsers it is possible to change the <body> (or window)\r\n        // scrollbar to the left side, but is very rare and is difficult to\r\n        // check for. Plus, for modal dialogs with backdrops, it is more\r\n        // important that the backdrop is checked but not so much the window.\r\n        if (canScrollY) {\r\n          const isRTL = win.getComputedStyle(target).direction === 'rtl';\r\n          if (isRTL) {\r\n            xCond = event.offsetX <= target.offsetWidth - target.clientWidth;\r\n          }\r\n        }\r\n        if (xCond || canScrollX && event.offsetY > target.clientHeight) {\r\n          return;\r\n        }\r\n      }\r\n      const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\r\n        var _node$context;\r\n        return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\r\n      });\r\n      if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {\r\n        return;\r\n      }\r\n      const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\r\n      if (children.length > 0) {\r\n        let shouldDismiss = true;\r\n        children.forEach(child => {\r\n          var _child$context2;\r\n          if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\r\n            shouldDismiss = false;\r\n            return;\r\n          }\r\n        });\r\n        if (!shouldDismiss) {\r\n          return;\r\n        }\r\n      }\r\n      events.emit('dismiss', {\r\n        type: 'outsidePress',\r\n        data: {\r\n          returnFocus: nested ? {\r\n            preventScroll: true\r\n          } : isVirtualClick(event) || isVirtualPointerEvent(event)\r\n        }\r\n      });\r\n      onOpenChange(false);\r\n    }\r\n    function onScroll() {\r\n      onOpenChange(false);\r\n    }\r\n    const doc = getDocument(floating);\r\n    escapeKey && doc.addEventListener('keydown', onKeyDown);\r\n    outsidePress && doc.addEventListener(outsidePressEvent, onOutsidePress);\r\n    let ancestors = [];\r\n    if (ancestorScroll) {\r\n      if (isElement(domReference)) {\r\n        ancestors = (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__.getOverflowAncestors)(domReference);\r\n      }\r\n      if (isElement(floating)) {\r\n        ancestors = ancestors.concat((0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__.getOverflowAncestors)(floating));\r\n      }\r\n      if (!isElement(reference) && reference && reference.contextElement) {\r\n        ancestors = ancestors.concat((0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_4__.getOverflowAncestors)(reference.contextElement));\r\n      }\r\n    }\r\n\r\n    // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\r\n    ancestors = ancestors.filter(ancestor => {\r\n      var _doc$defaultView;\r\n      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\r\n    });\r\n    ancestors.forEach(ancestor => {\r\n      ancestor.addEventListener('scroll', onScroll, {\r\n        passive: true\r\n      });\r\n    });\r\n    return () => {\r\n      escapeKey && doc.removeEventListener('keydown', onKeyDown);\r\n      outsidePress && doc.removeEventListener(outsidePressEvent, onOutsidePress);\r\n      ancestors.forEach(ancestor => {\r\n        ancestor.removeEventListener('scroll', onScroll);\r\n      });\r\n    };\r\n  }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, events, tree, nodeId, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, nested]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    insideReactTreeRef.current = false;\r\n  }, [outsidePress, outsidePressEvent]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    return {\r\n      reference: {\r\n        [bubbleHandlerKeys[referencePressEvent]]: () => {\r\n          if (referencePress) {\r\n            events.emit('dismiss', {\r\n              type: 'referencePress',\r\n              data: {\r\n                returnFocus: false\r\n              }\r\n            });\r\n            onOpenChange(false);\r\n          }\r\n        }\r\n      },\r\n      floating: {\r\n        [captureHandlerKeys[outsidePressEvent]]: () => {\r\n          insideReactTreeRef.current = true;\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange]);\r\n};\r\n\r\n/**\r\n * Adds focus event listeners that change the open state, like CSS :focus.\r\n * @see https://floating-ui.com/docs/useFocus\r\n */\r\nconst useFocus = function (_ref, _temp) {\r\n  let {\r\n    open,\r\n    onOpenChange,\r\n    dataRef,\r\n    events,\r\n    refs,\r\n    elements: {\r\n      floating,\r\n      domReference\r\n    }\r\n  } = _ref;\r\n  let {\r\n    enabled = true,\r\n    keyboardOnly = true\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef('');\r\n  const blockFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    const doc = getDocument(floating);\r\n    const win = doc.defaultView || window;\r\n\r\n    // If the reference was focused and the user left the tab/window, and the\r\n    // floating element was not open, the focus should be blocked when they\r\n    // return to the tab/window.\r\n    function onBlur() {\r\n      if (!open && isHTMLElement(domReference) && domReference === activeElement$1(getDocument(domReference))) {\r\n        blockFocusRef.current = true;\r\n      }\r\n    }\r\n    win.addEventListener('blur', onBlur);\r\n    return () => {\r\n      win.removeEventListener('blur', onBlur);\r\n    };\r\n  }, [floating, domReference, open, enabled]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    function onDismiss(payload) {\r\n      if (payload.type === 'referencePress' || payload.type === 'escapeKey') {\r\n        blockFocusRef.current = true;\r\n      }\r\n    }\r\n    events.on('dismiss', onDismiss);\r\n    return () => {\r\n      events.off('dismiss', onDismiss);\r\n    };\r\n  }, [events, enabled]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timeoutRef.current);\r\n    };\r\n  }, []);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    return {\r\n      reference: {\r\n        onPointerDown(_ref2) {\r\n          let {\r\n            pointerType\r\n          } = _ref2;\r\n          pointerTypeRef.current = pointerType;\r\n          blockFocusRef.current = !!(pointerType && keyboardOnly);\r\n        },\r\n        onMouseLeave() {\r\n          blockFocusRef.current = false;\r\n        },\r\n        onFocus(event) {\r\n          var _dataRef$current$open;\r\n          if (blockFocusRef.current) {\r\n            return;\r\n          }\r\n\r\n          // Dismiss with click should ignore the subsequent `focus` trigger,\r\n          // but only if the click originated inside the reference element.\r\n          if (event.type === 'focus' && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === 'mousedown' && dataRef.current.openEvent && isEventTargetWithin(dataRef.current.openEvent, domReference)) {\r\n            return;\r\n          }\r\n          dataRef.current.openEvent = event.nativeEvent;\r\n          onOpenChange(true);\r\n        },\r\n        onBlur(event) {\r\n          blockFocusRef.current = false;\r\n          const relatedTarget = event.relatedTarget;\r\n\r\n          // Hit the non-modal focus management portal guard. Focus will be\r\n          // moved into the floating element immediately after.\r\n          const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute('data-floating-ui-focus-guard') && relatedTarget.getAttribute('data-type') === 'outside';\r\n\r\n          // Wait for the window blur listener to fire.\r\n          timeoutRef.current = setTimeout(() => {\r\n            // When focusing the reference element (e.g. regular click), then\r\n            // clicking into the floating element, prevent it from hiding.\r\n            // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\r\n            if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {\r\n              return;\r\n            }\r\n            onOpenChange(false);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);\r\n};\r\n\r\nlet isPreventScrollSupported = false;\r\nconst ARROW_UP = 'ArrowUp';\r\nconst ARROW_DOWN = 'ArrowDown';\r\nconst ARROW_LEFT = 'ArrowLeft';\r\nconst ARROW_RIGHT = 'ArrowRight';\r\nfunction isDifferentRow(index, cols, prevRow) {\r\n  return Math.floor(index / cols) !== prevRow;\r\n}\r\nfunction isIndexOutOfBounds(listRef, index) {\r\n  return index < 0 || index >= listRef.current.length;\r\n}\r\nfunction findNonDisabledIndex(listRef, _temp) {\r\n  let {\r\n    startingIndex = -1,\r\n    decrement = false,\r\n    disabledIndices,\r\n    amount = 1\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const list = listRef.current;\r\n  let index = startingIndex;\r\n  do {\r\n    var _list$index, _list$index2;\r\n    index = index + (decrement ? -amount : amount);\r\n  } while (index >= 0 && index <= list.length - 1 && (disabledIndices ? disabledIndices.includes(index) : list[index] == null || ((_list$index = list[index]) == null ? void 0 : _list$index.hasAttribute('disabled')) || ((_list$index2 = list[index]) == null ? void 0 : _list$index2.getAttribute('aria-disabled')) === 'true'));\r\n  return index;\r\n}\r\nfunction doSwitch(orientation, vertical, horizontal) {\r\n  switch (orientation) {\r\n    case 'vertical':\r\n      return vertical;\r\n    case 'horizontal':\r\n      return horizontal;\r\n    default:\r\n      return vertical || horizontal;\r\n  }\r\n}\r\nfunction isMainOrientationKey(key, orientation) {\r\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\r\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\r\n  const vertical = key === ARROW_DOWN;\r\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\r\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key == ' ' || key === '';\r\n}\r\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\r\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\r\n  const horizontal = key === ARROW_DOWN;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\r\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\r\n  const horizontal = key === ARROW_UP;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\nfunction getMinIndex(listRef, disabledIndices) {\r\n  return findNonDisabledIndex(listRef, {\r\n    disabledIndices\r\n  });\r\n}\r\nfunction getMaxIndex(listRef, disabledIndices) {\r\n  return findNonDisabledIndex(listRef, {\r\n    decrement: true,\r\n    startingIndex: listRef.current.length,\r\n    disabledIndices\r\n  });\r\n}\r\n/**\r\n * Adds focus-managed indexed navigation via arrow keys to a list of items\r\n * within the floating element.\r\n * @see https://floating-ui.com/docs/useListNavigation\r\n */\r\nconst useListNavigation = function (_ref, _temp2) {\r\n  let {\r\n    open,\r\n    onOpenChange,\r\n    refs,\r\n    elements: {\r\n      domReference\r\n    }\r\n  } = _ref;\r\n  let {\r\n    listRef,\r\n    activeIndex,\r\n    onNavigate: unstable_onNavigate = () => {},\r\n    enabled = true,\r\n    selectedIndex = null,\r\n    allowEscape = false,\r\n    loop = false,\r\n    nested = false,\r\n    rtl = false,\r\n    virtual = false,\r\n    focusItemOnOpen = 'auto',\r\n    focusItemOnHover = true,\r\n    openOnArrowKeyDown = true,\r\n    disabledIndices = undefined,\r\n    orientation = 'vertical',\r\n    cols = 1,\r\n    scrollItemIntoView = true\r\n  } = _temp2 === void 0 ? {\r\n    listRef: {\r\n      current: []\r\n    },\r\n    activeIndex: null,\r\n    onNavigate: () => {}\r\n  } : _temp2;\r\n  if (true) {\r\n    if (allowEscape) {\r\n      if (!loop) {\r\n        console.warn(['Floating UI: `useListNavigation` looping must be enabled to allow', 'escaping.'].join(' '));\r\n      }\r\n      if (!virtual) {\r\n        console.warn(['Floating UI: `useListNavigation` must be virtual to allow', 'escaping.'].join(' '));\r\n      }\r\n    }\r\n    if (orientation === 'vertical' && cols > 1) {\r\n      console.warn(['Floating UI: In grid list navigation mode (`cols` > 1), the', '`orientation` should be either \"horizontal\" or \"both\".'].join(' '));\r\n    }\r\n  }\r\n  const parentId = useFloatingParentNodeId();\r\n  const tree = useFloatingTree();\r\n  const onNavigate = useEvent(unstable_onNavigate);\r\n  const focusItemOnOpenRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(focusItemOnOpen);\r\n  const indexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(selectedIndex != null ? selectedIndex : -1);\r\n  const keyRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const isPointerModalityRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\r\n  const previousOnNavigateRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(onNavigate);\r\n  const previousOpenRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(open);\r\n  const forceSyncFocus = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const forceScrollIntoViewRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const disabledIndicesRef = useLatestRef(disabledIndices);\r\n  const latestOpenRef = useLatestRef(open);\r\n  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);\r\n  const [activeId, setActiveId] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\r\n  const focusItem = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (listRef, indexRef, forceScrollIntoView) {\r\n    if (forceScrollIntoView === void 0) {\r\n      forceScrollIntoView = false;\r\n    }\r\n    const item = listRef.current[indexRef.current];\r\n    if (virtual) {\r\n      setActiveId(item == null ? void 0 : item.id);\r\n    } else {\r\n      enqueueFocus(item, {\r\n        preventScroll: true,\r\n        // Mac Safari does not move the virtual cursor unless the focus call\r\n        // is sync. However, for the very first focus call, we need to wait\r\n        // for the position to be ready in order to prevent unwanted\r\n        // scrolling. This means the virtual cursor will not move to the first\r\n        // item when first opening the floating element, but will on\r\n        // subsequent calls. `preventScroll` is supported in modern Safari,\r\n        // so we can use that instead.\r\n        // iOS Safari must be async or the first item will not be focused.\r\n        sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false\r\n      });\r\n    }\r\n    requestAnimationFrame(() => {\r\n      const scrollIntoViewOptions = scrollItemIntoViewRef.current;\r\n      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\r\n      if (shouldScrollIntoView) {\r\n        // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\r\n        // by all browsers.\r\n        item.scrollIntoView == null ? void 0 : item.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {\r\n          block: 'nearest',\r\n          inline: 'nearest'\r\n        } : scrollIntoViewOptions);\r\n      }\r\n    });\r\n  }, [virtual, scrollItemIntoViewRef]);\r\n  index(() => {\r\n    document.createElement('div').focus({\r\n      get preventScroll() {\r\n        isPreventScrollSupported = true;\r\n        return false;\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\r\n  // element. Also, reset `activeIndex` upon closing the floating element.\r\n  index(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    if (open) {\r\n      if (focusItemOnOpenRef.current && selectedIndex != null) {\r\n        // Regardless of the pointer modality, we want to ensure the selected\r\n        // item comes into view when the floating element is opened.\r\n        forceScrollIntoViewRef.current = true;\r\n        onNavigate(selectedIndex);\r\n      }\r\n    } else if (previousOpenRef.current) {\r\n      // Since the user can specify `onNavigate` conditionally\r\n      // (onNavigate: open ? setActiveIndex : setSelectedIndex),\r\n      // we store and call the previous function.\r\n      indexRef.current = -1;\r\n      previousOnNavigateRef.current(null);\r\n    }\r\n  }, [enabled, open, selectedIndex, onNavigate]);\r\n\r\n  // Sync `activeIndex` to be the focused item while the floating element is\r\n  // open.\r\n  index(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    if (open) {\r\n      if (activeIndex == null) {\r\n        forceSyncFocus.current = false;\r\n        if (selectedIndex != null) {\r\n          return;\r\n        }\r\n\r\n        // Reset while the floating element was open (e.g. the list changed).\r\n        if (previousOpenRef.current) {\r\n          indexRef.current = -1;\r\n          focusItem(listRef, indexRef);\r\n        }\r\n\r\n        // Initial sync.\r\n        if (!previousOpenRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\r\n          indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\r\n          onNavigate(indexRef.current);\r\n        }\r\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\r\n        indexRef.current = activeIndex;\r\n        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);\r\n        forceScrollIntoViewRef.current = false;\r\n      }\r\n    }\r\n  }, [enabled, open, activeIndex, selectedIndex, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);\r\n\r\n  // Ensure the parent floating element has focus when a nested child closes\r\n  // to allow arrow key navigation to work after the pointer leaves the child.\r\n  index(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    if (previousOpenRef.current && !open) {\r\n      var _tree$nodesRef$curren, _tree$nodesRef$curren2;\r\n      const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;\r\n      if (parentFloating && !contains(parentFloating, activeElement$1(getDocument(parentFloating)))) {\r\n        parentFloating.focus({\r\n          preventScroll: true\r\n        });\r\n      }\r\n    }\r\n  }, [enabled, open, tree, parentId]);\r\n  index(() => {\r\n    keyRef.current = null;\r\n    previousOnNavigateRef.current = onNavigate;\r\n    previousOpenRef.current = open;\r\n  });\r\n  const hasActiveIndex = activeIndex != null;\r\n  const item = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    function syncCurrentTarget(currentTarget) {\r\n      if (!open) return;\r\n      const index = listRef.current.indexOf(currentTarget);\r\n      if (index !== -1) {\r\n        onNavigate(index);\r\n      }\r\n    }\r\n    const props = {\r\n      onFocus(_ref2) {\r\n        let {\r\n          currentTarget\r\n        } = _ref2;\r\n        syncCurrentTarget(currentTarget);\r\n      },\r\n      onClick: _ref3 => {\r\n        let {\r\n          currentTarget\r\n        } = _ref3;\r\n        return currentTarget.focus({\r\n          preventScroll: true\r\n        });\r\n      },\r\n      // Safari\r\n      ...(focusItemOnHover && {\r\n        onMouseMove(_ref4) {\r\n          let {\r\n            currentTarget\r\n          } = _ref4;\r\n          syncCurrentTarget(currentTarget);\r\n        },\r\n        onPointerLeave() {\r\n          if (!isPointerModalityRef.current) {\r\n            return;\r\n          }\r\n          indexRef.current = -1;\r\n          focusItem(listRef, indexRef);\r\n\r\n          // Virtual cursor with VoiceOver on iOS needs this to be flushed\r\n          // synchronously or there is a glitch that prevents nested\r\n          // submenus from being accessible.\r\n          (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => onNavigate(null));\r\n          if (!virtual) {\r\n            var _refs$floating$curren;\r\n            // This also needs to be sync to prevent fast mouse movements\r\n            // from leaving behind a stale active item when landing on a\r\n            // disabled button item.\r\n            (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.focus({\r\n              preventScroll: true\r\n            });\r\n          }\r\n        }\r\n      })\r\n    };\r\n    return props;\r\n  }, [open, refs, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    const disabledIndices = disabledIndicesRef.current;\r\n    function onKeyDown(event) {\r\n      isPointerModalityRef.current = false;\r\n      forceSyncFocus.current = true;\r\n\r\n      // If the floating element is animating out, ignore navigation. Otherwise,\r\n      // the `activeIndex` gets set to 0 despite not being open so the next time\r\n      // the user ArrowDowns, the first item won't be focused.\r\n      if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {\r\n        return;\r\n      }\r\n      if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\r\n        stopEvent(event);\r\n        onOpenChange(false);\r\n        if (isHTMLElement(domReference)) {\r\n          domReference.focus();\r\n        }\r\n        return;\r\n      }\r\n      const currentIndex = indexRef.current;\r\n      const minIndex = getMinIndex(listRef, disabledIndices);\r\n      const maxIndex = getMaxIndex(listRef, disabledIndices);\r\n      if (event.key === 'Home') {\r\n        indexRef.current = minIndex;\r\n        onNavigate(indexRef.current);\r\n      }\r\n      if (event.key === 'End') {\r\n        indexRef.current = maxIndex;\r\n        onNavigate(indexRef.current);\r\n      }\r\n\r\n      // Grid navigation.\r\n      if (cols > 1) {\r\n        const prevIndex = indexRef.current;\r\n        if (event.key === ARROW_UP) {\r\n          stopEvent(event);\r\n          if (prevIndex === -1) {\r\n            indexRef.current = maxIndex;\r\n          } else {\r\n            indexRef.current = findNonDisabledIndex(listRef, {\r\n              startingIndex: prevIndex,\r\n              amount: cols,\r\n              decrement: true,\r\n              disabledIndices\r\n            });\r\n            if (loop && (prevIndex - cols < minIndex || indexRef.current < 0)) {\r\n              const col = prevIndex % cols;\r\n              const maxCol = maxIndex % cols;\r\n              const offset = maxIndex - (maxCol - col);\r\n              if (maxCol === col) {\r\n                indexRef.current = maxIndex;\r\n              } else {\r\n                indexRef.current = maxCol > col ? offset : offset - cols;\r\n              }\r\n            }\r\n          }\r\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\r\n            indexRef.current = prevIndex;\r\n          }\r\n          onNavigate(indexRef.current);\r\n        }\r\n        if (event.key === ARROW_DOWN) {\r\n          stopEvent(event);\r\n          if (prevIndex === -1) {\r\n            indexRef.current = minIndex;\r\n          } else {\r\n            indexRef.current = findNonDisabledIndex(listRef, {\r\n              startingIndex: prevIndex,\r\n              amount: cols,\r\n              disabledIndices\r\n            });\r\n            if (loop && prevIndex + cols > maxIndex) {\r\n              indexRef.current = findNonDisabledIndex(listRef, {\r\n                startingIndex: prevIndex % cols - cols,\r\n                amount: cols,\r\n                disabledIndices\r\n              });\r\n            }\r\n          }\r\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\r\n            indexRef.current = prevIndex;\r\n          }\r\n          onNavigate(indexRef.current);\r\n        }\r\n\r\n        // Remains on the same row/column.\r\n        if (orientation === 'both') {\r\n          const prevRow = Math.floor(prevIndex / cols);\r\n          if (event.key === ARROW_RIGHT) {\r\n            stopEvent(event);\r\n            if (prevIndex % cols !== cols - 1) {\r\n              indexRef.current = findNonDisabledIndex(listRef, {\r\n                startingIndex: prevIndex,\r\n                disabledIndices\r\n              });\r\n              if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {\r\n                indexRef.current = findNonDisabledIndex(listRef, {\r\n                  startingIndex: prevIndex - prevIndex % cols - 1,\r\n                  disabledIndices\r\n                });\r\n              }\r\n            } else if (loop) {\r\n              indexRef.current = findNonDisabledIndex(listRef, {\r\n                startingIndex: prevIndex - prevIndex % cols - 1,\r\n                disabledIndices\r\n              });\r\n            }\r\n            if (isDifferentRow(indexRef.current, cols, prevRow)) {\r\n              indexRef.current = prevIndex;\r\n            }\r\n          }\r\n          if (event.key === ARROW_LEFT) {\r\n            stopEvent(event);\r\n            if (prevIndex % cols !== 0) {\r\n              indexRef.current = findNonDisabledIndex(listRef, {\r\n                startingIndex: prevIndex,\r\n                disabledIndices,\r\n                decrement: true\r\n              });\r\n              if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {\r\n                indexRef.current = findNonDisabledIndex(listRef, {\r\n                  startingIndex: prevIndex + (cols - prevIndex % cols),\r\n                  decrement: true,\r\n                  disabledIndices\r\n                });\r\n              }\r\n            } else if (loop) {\r\n              indexRef.current = findNonDisabledIndex(listRef, {\r\n                startingIndex: prevIndex + (cols - prevIndex % cols),\r\n                decrement: true,\r\n                disabledIndices\r\n              });\r\n            }\r\n            if (isDifferentRow(indexRef.current, cols, prevRow)) {\r\n              indexRef.current = prevIndex;\r\n            }\r\n          }\r\n          const lastRow = Math.floor(maxIndex / cols) === prevRow;\r\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\r\n            if (loop && lastRow) {\r\n              indexRef.current = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(listRef, {\r\n                startingIndex: prevIndex - prevIndex % cols - 1,\r\n                disabledIndices\r\n              });\r\n            } else {\r\n              indexRef.current = prevIndex;\r\n            }\r\n          }\r\n          onNavigate(indexRef.current);\r\n          return;\r\n        }\r\n      }\r\n      if (isMainOrientationKey(event.key, orientation)) {\r\n        stopEvent(event);\r\n\r\n        // Reset the index if no item is focused.\r\n        if (open && !virtual && activeElement$1(event.currentTarget.ownerDocument) === event.currentTarget) {\r\n          indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\r\n          onNavigate(indexRef.current);\r\n          return;\r\n        }\r\n        if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\r\n          if (loop) {\r\n            indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\r\n              startingIndex: currentIndex,\r\n              disabledIndices\r\n            });\r\n          } else {\r\n            indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\r\n              startingIndex: currentIndex,\r\n              disabledIndices\r\n            }));\r\n          }\r\n        } else {\r\n          if (loop) {\r\n            indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\r\n              startingIndex: currentIndex,\r\n              decrement: true,\r\n              disabledIndices\r\n            });\r\n          } else {\r\n            indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\r\n              startingIndex: currentIndex,\r\n              decrement: true,\r\n              disabledIndices\r\n            }));\r\n          }\r\n        }\r\n        if (isIndexOutOfBounds(listRef, indexRef.current)) {\r\n          onNavigate(null);\r\n        } else {\r\n          onNavigate(indexRef.current);\r\n        }\r\n      }\r\n    }\r\n    function checkVirtualMouse(event) {\r\n      if (focusItemOnOpen === 'auto' && isVirtualClick(event.nativeEvent)) {\r\n        focusItemOnOpenRef.current = true;\r\n      }\r\n    }\r\n    function checkVirtualPointer(event) {\r\n      // `pointerdown` fires first, reset the state then perform the checks.\r\n      focusItemOnOpenRef.current = focusItemOnOpen;\r\n      if (focusItemOnOpen === 'auto' && isVirtualPointerEvent(event.nativeEvent)) {\r\n        focusItemOnOpenRef.current = true;\r\n      }\r\n    }\r\n    const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {\r\n      'aria-activedescendant': activeId\r\n    };\r\n    return {\r\n      reference: {\r\n        ...ariaActiveDescendantProp,\r\n        onKeyDown(event) {\r\n          isPointerModalityRef.current = false;\r\n          const isArrowKey = event.key.indexOf('Arrow') === 0;\r\n          if (virtual && open) {\r\n            return onKeyDown(event);\r\n          }\r\n\r\n          // If a floating element should not open on arrow key down, avoid\r\n          // setting `activeIndex` while it's closed.\r\n          if (!open && !openOnArrowKeyDown && isArrowKey) {\r\n            return;\r\n          }\r\n          const isNavigationKey = isArrowKey || event.key === 'Enter' || event.key === ' ' || event.key === '';\r\n          if (isNavigationKey) {\r\n            keyRef.current = event.key;\r\n          }\r\n          if (nested) {\r\n            if (isCrossOrientationOpenKey(event.key, orientation, rtl)) {\r\n              stopEvent(event);\r\n              if (open) {\r\n                indexRef.current = getMinIndex(listRef, disabledIndices);\r\n                onNavigate(indexRef.current);\r\n              } else {\r\n                onOpenChange(true);\r\n              }\r\n            }\r\n            return;\r\n          }\r\n          if (isMainOrientationKey(event.key, orientation)) {\r\n            if (selectedIndex != null) {\r\n              indexRef.current = selectedIndex;\r\n            }\r\n            stopEvent(event);\r\n            if (!open && openOnArrowKeyDown) {\r\n              onOpenChange(true);\r\n            } else {\r\n              onKeyDown(event);\r\n            }\r\n            if (open) {\r\n              onNavigate(indexRef.current);\r\n            }\r\n          }\r\n        },\r\n        onFocus() {\r\n          if (open) {\r\n            onNavigate(null);\r\n          }\r\n        },\r\n        onPointerDown: checkVirtualPointer,\r\n        onMouseDown: checkVirtualMouse,\r\n        onClick: checkVirtualMouse\r\n      },\r\n      floating: {\r\n        'aria-orientation': orientation === 'both' ? undefined : orientation,\r\n        ...ariaActiveDescendantProp,\r\n        onKeyDown,\r\n        onPointerMove() {\r\n          isPointerModalityRef.current = true;\r\n        }\r\n      },\r\n      item\r\n    };\r\n  }, [domReference, refs, activeId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item]);\r\n};\r\n\r\nfunction useMergeRefs(refs) {\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (refs.every(ref => ref == null)) {\r\n      return null;\r\n    }\r\n    return value => {\r\n      refs.forEach(ref => {\r\n        if (typeof ref === 'function') {\r\n          ref(value);\r\n        } else if (ref != null) {\r\n          ref.current = value;\r\n        }\r\n      });\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, refs);\r\n}\r\n\r\n/**\r\n * Adds relevant screen reader props for a given element `role`.\r\n * @see https://floating-ui.com/docs/useRole\r\n */\r\nconst useRole = function (_ref, _temp) {\r\n  let {\r\n    open\r\n  } = _ref;\r\n  let {\r\n    enabled = true,\r\n    role = 'dialog'\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const rootId = useId();\r\n  const referenceId = useId();\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    const floatingProps = {\r\n      id: rootId,\r\n      role\r\n    };\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    if (role === 'tooltip') {\r\n      return {\r\n        reference: {\r\n          'aria-describedby': open ? rootId : undefined\r\n        },\r\n        floating: floatingProps\r\n      };\r\n    }\r\n    return {\r\n      reference: {\r\n        'aria-expanded': open ? 'true' : 'false',\r\n        'aria-haspopup': role === 'alertdialog' ? 'dialog' : role,\r\n        'aria-controls': open ? rootId : undefined,\r\n        ...(role === 'listbox' && {\r\n          role: 'combobox'\r\n        }),\r\n        ...(role === 'menu' && {\r\n          id: referenceId\r\n        })\r\n      },\r\n      floating: {\r\n        ...floatingProps,\r\n        ...(role === 'menu' && {\r\n          'aria-labelledby': referenceId\r\n        })\r\n      }\r\n    };\r\n  }, [enabled, role, open, rootId, referenceId]);\r\n};\r\n\r\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\r\n// like `background-color`.\r\nconst camelCaseToKebabCase = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\r\nfunction useDelayUnmount(open, durationMs) {\r\n  const [isMounted, setIsMounted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(open);\r\n  if (open && !isMounted) {\r\n    setIsMounted(true);\r\n  }\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!open) {\r\n      const timeout = setTimeout(() => setIsMounted(false), durationMs);\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [open, durationMs]);\r\n  return isMounted;\r\n}\r\n/**\r\n * Provides a status string to apply CSS transitions to a floating element,\r\n * correctly handling placement-aware transitions.\r\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\r\n */\r\nfunction useTransitionStatus(_ref, _temp) {\r\n  let {\r\n    open,\r\n    elements: {\r\n      floating\r\n    }\r\n  } = _ref;\r\n  let {\r\n    duration = 250\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const isNumberDuration = typeof duration === 'number';\r\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\r\n  const [initiated, setInitiated] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\r\n  const [status, setStatus] = react__WEBPACK_IMPORTED_MODULE_0__.useState('unmounted');\r\n  const isMounted = useDelayUnmount(open, closeDuration);\r\n\r\n  // `initiated` check prevents this `setState` call from breaking\r\n  // <FloatingPortal />. This call is necessary to ensure subsequent opens\r\n  // after the initial one allows the correct side animation to play when the\r\n  // placement has changed.\r\n  index(() => {\r\n    if (initiated && !isMounted) {\r\n      setStatus('unmounted');\r\n    }\r\n  }, [initiated, isMounted]);\r\n  index(() => {\r\n    if (!floating) return;\r\n    if (open) {\r\n      setStatus('initial');\r\n      const frame = requestAnimationFrame(() => {\r\n        setStatus('open');\r\n      });\r\n      return () => {\r\n        cancelAnimationFrame(frame);\r\n      };\r\n    } else {\r\n      setInitiated(true);\r\n      setStatus('close');\r\n    }\r\n  }, [open, floating]);\r\n  return {\r\n    isMounted,\r\n    status\r\n  };\r\n}\r\n/**\r\n * Provides styles to apply CSS transitions to a floating element, correctly\r\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\r\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\r\n */\r\nfunction useTransitionStyles(context, _temp2) {\r\n  let {\r\n    initial: unstable_initial = {\r\n      opacity: 0\r\n    },\r\n    open: unstable_open,\r\n    close: unstable_close,\r\n    common: unstable_common,\r\n    duration = 250\r\n  } = _temp2 === void 0 ? {} : _temp2;\r\n  const placement = context.placement;\r\n  const side = placement.split('-')[0];\r\n  const [styles, setStyles] = react__WEBPACK_IMPORTED_MODULE_0__.useState({});\r\n  const {\r\n    isMounted,\r\n    status\r\n  } = useTransitionStatus(context, {\r\n    duration\r\n  });\r\n  const initialRef = useLatestRef(unstable_initial);\r\n  const openRef = useLatestRef(unstable_open);\r\n  const closeRef = useLatestRef(unstable_close);\r\n  const commonRef = useLatestRef(unstable_common);\r\n  const isNumberDuration = typeof duration === 'number';\r\n  const openDuration = (isNumberDuration ? duration : duration.open) || 0;\r\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\r\n  index(() => {\r\n    const fnArgs = {\r\n      side,\r\n      placement\r\n    };\r\n    const initial = initialRef.current;\r\n    const close = closeRef.current;\r\n    const open = openRef.current;\r\n    const common = commonRef.current;\r\n    const initialStyles = typeof initial === 'function' ? initial(fnArgs) : initial;\r\n    const closeStyles = typeof close === 'function' ? close(fnArgs) : close;\r\n    const commonStyles = typeof common === 'function' ? common(fnArgs) : common;\r\n    const openStyles = (typeof open === 'function' ? open(fnArgs) : open) || Object.keys(initialStyles).reduce((acc, key) => {\r\n      acc[key] = '';\r\n      return acc;\r\n    }, {});\r\n    if (status === 'initial') {\r\n      setStyles(styles => ({\r\n        transitionProperty: styles.transitionProperty,\r\n        ...commonStyles,\r\n        ...initialStyles\r\n      }));\r\n    }\r\n    if (status === 'open') {\r\n      setStyles({\r\n        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),\r\n        transitionDuration: openDuration + \"ms\",\r\n        ...commonStyles,\r\n        ...openStyles\r\n      });\r\n    }\r\n    if (status === 'close') {\r\n      const styles = closeStyles || initialStyles;\r\n      setStyles({\r\n        transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),\r\n        transitionDuration: closeDuration + \"ms\",\r\n        ...commonStyles,\r\n        ...styles\r\n      });\r\n    }\r\n  }, [side, placement, closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status]);\r\n  return {\r\n    isMounted,\r\n    styles\r\n  };\r\n}\r\n\r\n/**\r\n * Provides a matching callback that can be used to focus an item as the user\r\n * types, often used in tandem with `useListNavigation()`.\r\n * @see https://floating-ui.com/docs/useTypeahead\r\n */\r\nconst useTypeahead = function (_ref, _temp) {\r\n  var _ref2;\r\n  let {\r\n    open,\r\n    dataRef\r\n  } = _ref;\r\n  let {\r\n    listRef,\r\n    activeIndex,\r\n    onMatch: unstable_onMatch = () => {},\r\n    enabled = true,\r\n    findMatch = null,\r\n    resetMs = 1000,\r\n    ignoreKeys = [],\r\n    selectedIndex = null\r\n  } = _temp === void 0 ? {\r\n    listRef: {\r\n      current: []\r\n    },\r\n    activeIndex: null\r\n  } : _temp;\r\n  const timeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const stringRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef('');\r\n  const prevIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef((_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1);\r\n  const matchIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const onMatch = useEvent(unstable_onMatch);\r\n  const findMatchRef = useLatestRef(findMatch);\r\n  const ignoreKeysRef = useLatestRef(ignoreKeys);\r\n  index(() => {\r\n    if (open) {\r\n      clearTimeout(timeoutIdRef.current);\r\n      matchIndexRef.current = null;\r\n      stringRef.current = '';\r\n    }\r\n  }, [open]);\r\n  index(() => {\r\n    // Sync arrow key navigation but not typeahead navigation.\r\n    if (open && stringRef.current === '') {\r\n      var _ref3;\r\n      prevIndexRef.current = (_ref3 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref3 : -1;\r\n    }\r\n  }, [open, selectedIndex, activeIndex]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    function onKeyDown(event) {\r\n      // Correctly scope nested non-portalled floating elements. Since the nested\r\n      // floating element is inside of the another, we find the closest role\r\n      // that indicates the floating element scope.\r\n      const target = getTarget(event.nativeEvent);\r\n      if (isElement(target) && (activeElement$1(getDocument(target)) !== event.currentTarget ? target.closest('[role=\"dialog\"],[role=\"menu\"],[role=\"listbox\"],[role=\"tree\"],[role=\"grid\"]') !== event.currentTarget : false)) {\r\n        return;\r\n      }\r\n      if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\r\n        dataRef.current.typing = true;\r\n        if (event.key === ' ') {\r\n          stopEvent(event);\r\n        }\r\n      }\r\n      const listContent = listRef.current;\r\n      if (listContent == null || ignoreKeysRef.current.includes(event.key) ||\r\n      // Character key.\r\n      event.key.length !== 1 ||\r\n      // Modifier key.\r\n      event.ctrlKey || event.metaKey || event.altKey) {\r\n        return;\r\n      }\r\n\r\n      // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\r\n      // allow it in this case, too.\r\n      const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\r\n        var _text$, _text$2;\r\n        return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\r\n      });\r\n\r\n      // Allows the user to cycle through items that start with the same letter\r\n      // in rapid succession.\r\n      if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\r\n        stringRef.current = '';\r\n        prevIndexRef.current = matchIndexRef.current;\r\n      }\r\n      stringRef.current += event.key;\r\n      clearTimeout(timeoutIdRef.current);\r\n      timeoutIdRef.current = setTimeout(() => {\r\n        stringRef.current = '';\r\n        prevIndexRef.current = matchIndexRef.current;\r\n        dataRef.current.typing = false;\r\n      }, resetMs);\r\n      const prevIndex = prevIndexRef.current;\r\n      const orderedList = [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)];\r\n      const str = findMatchRef.current ? findMatchRef.current(orderedList, stringRef.current) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(stringRef.current.toLocaleLowerCase())) === 0);\r\n      const index = str ? listContent.indexOf(str) : -1;\r\n      if (index !== -1) {\r\n        onMatch(index);\r\n        matchIndexRef.current = index;\r\n      }\r\n    }\r\n    return {\r\n      reference: {\r\n        onKeyDown\r\n      },\r\n      floating: {\r\n        onKeyDown\r\n      }\r\n    };\r\n  }, [enabled, dataRef, listRef, resetMs, ignoreKeysRef, findMatchRef, onMatch]);\r\n};\r\n\r\nfunction getArgsWithCustomFloatingHeight(args, height) {\r\n  return {\r\n    ...args,\r\n    rects: {\r\n      ...args.rects,\r\n      floating: {\r\n        ...args.rects.floating,\r\n        height\r\n      }\r\n    }\r\n  };\r\n}\r\n/**\r\n * Positions the floating element such that an inner element inside\r\n * of it is anchored to the reference element.\r\n * @see https://floating-ui.com/docs/inner\r\n */\r\nconst inner = props => ({\r\n  name: 'inner',\r\n  options: props,\r\n  async fn(middlewareArguments) {\r\n    const {\r\n      listRef,\r\n      overflowRef,\r\n      onFallbackChange,\r\n      offset: innerOffset = 0,\r\n      index = 0,\r\n      minItemsVisible = 4,\r\n      referenceOverflowThreshold = 0,\r\n      scrollRef,\r\n      ...detectOverflowOptions\r\n    } = props;\r\n    const {\r\n      rects,\r\n      elements: {\r\n        floating\r\n      }\r\n    } = middlewareArguments;\r\n    const item = listRef.current[index];\r\n    if (true) {\r\n      if (!middlewareArguments.placement.startsWith('bottom')) {\r\n        console.warn(['Floating UI: `placement` side must be \"bottom\" when using the', '`inner` middleware.'].join(' '));\r\n      }\r\n    }\r\n    if (!item) {\r\n      return {};\r\n    }\r\n    const nextArgs = {\r\n      ...middlewareArguments,\r\n      ...(await (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.offset)(-item.offsetTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(middlewareArguments))\r\n    };\r\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;\r\n    const overflow = await (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.detectOverflow)(getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);\r\n    const refOverflow = await (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.detectOverflow)(nextArgs, {\r\n      ...detectOverflowOptions,\r\n      elementContext: 'reference'\r\n    });\r\n    const diffY = Math.max(0, overflow.top);\r\n    const nextY = nextArgs.y + diffY;\r\n    const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));\r\n    el.style.maxHeight = maxHeight + \"px\";\r\n    el.scrollTop = diffY;\r\n\r\n    // There is not enough space, fallback to standard anchored positioning\r\n    if (onFallbackChange) {\r\n      if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {\r\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => onFallbackChange(true));\r\n      } else {\r\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => onFallbackChange(false));\r\n      }\r\n    }\r\n    if (overflowRef) {\r\n      overflowRef.current = await (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.detectOverflow)(getArgsWithCustomFloatingHeight({\r\n        ...nextArgs,\r\n        y: nextY\r\n      }, el.offsetHeight), detectOverflowOptions);\r\n    }\r\n    return {\r\n      y: nextY\r\n    };\r\n  }\r\n});\r\n/**\r\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\r\n * expand the floating element's height, revealing more list items.\r\n * @see https://floating-ui.com/docs/inner\r\n */\r\nconst useInnerOffset = (_ref, _ref2) => {\r\n  let {\r\n    open,\r\n    elements\r\n  } = _ref;\r\n  let {\r\n    enabled = true,\r\n    overflowRef,\r\n    scrollRef,\r\n    onChange: unstable_onChange\r\n  } = _ref2;\r\n  const onChange = useEvent(unstable_onChange);\r\n  const controlledScrollingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const prevScrollTopRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const initialOverflowRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    function onWheel(e) {\r\n      if (e.ctrlKey || !el || overflowRef.current == null) {\r\n        return;\r\n      }\r\n      const dY = e.deltaY;\r\n      const isAtTop = overflowRef.current.top >= -0.5;\r\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\r\n      const remainingScroll = el.scrollHeight - el.clientHeight;\r\n      const sign = dY < 0 ? -1 : 1;\r\n      const method = dY < 0 ? 'max' : 'min';\r\n      if (el.scrollHeight <= el.clientHeight) {\r\n        return;\r\n      }\r\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\r\n        e.preventDefault();\r\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => {\r\n          onChange(d => d + Math[method](dY, remainingScroll * sign));\r\n        });\r\n      } else if (/firefox/i.test(getUserAgent())) {\r\n        // Needed to propagate scrolling during momentum scrolling phase once\r\n        // it gets limited by the boundary. UX improvement, not critical.\r\n        el.scrollTop += dY;\r\n      }\r\n    }\r\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\r\n    if (open && el) {\r\n      el.addEventListener('wheel', onWheel);\r\n\r\n      // Wait for the position to be ready.\r\n      requestAnimationFrame(() => {\r\n        prevScrollTopRef.current = el.scrollTop;\r\n        if (overflowRef.current != null) {\r\n          initialOverflowRef.current = {\r\n            ...overflowRef.current\r\n          };\r\n        }\r\n      });\r\n      return () => {\r\n        prevScrollTopRef.current = null;\r\n        initialOverflowRef.current = null;\r\n        el.removeEventListener('wheel', onWheel);\r\n      };\r\n    }\r\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    return {\r\n      floating: {\r\n        onKeyDown() {\r\n          controlledScrollingRef.current = true;\r\n        },\r\n        onWheel() {\r\n          controlledScrollingRef.current = false;\r\n        },\r\n        onPointerMove() {\r\n          controlledScrollingRef.current = false;\r\n        },\r\n        onScroll() {\r\n          const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\r\n          if (!overflowRef.current || !el || !controlledScrollingRef.current) {\r\n            return;\r\n          }\r\n          if (prevScrollTopRef.current !== null) {\r\n            const scrollDiff = el.scrollTop - prevScrollTopRef.current;\r\n            if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\r\n              (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => onChange(d => d + scrollDiff));\r\n            }\r\n          }\r\n\r\n          // [Firefox] Wait for the height change to have been applied.\r\n          requestAnimationFrame(() => {\r\n            prevScrollTopRef.current = el.scrollTop;\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, overflowRef, elements.floating, scrollRef, onChange]);\r\n};\r\n\r\nfunction isPointInPolygon(point, polygon) {\r\n  const [x, y] = point;\r\n  let isInside = false;\r\n  const length = polygon.length;\r\n  for (let i = 0, j = length - 1; i < length; j = i++) {\r\n    const [xi, yi] = polygon[i] || [0, 0];\r\n    const [xj, yj] = polygon[j] || [0, 0];\r\n    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n    if (intersect) {\r\n      isInside = !isInside;\r\n    }\r\n  }\r\n  return isInside;\r\n}\r\nfunction isInside(point, rect) {\r\n  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\r\n}\r\nfunction safePolygon(_temp) {\r\n  let {\r\n    restMs = 0,\r\n    buffer = 0.5,\r\n    blockPointerEvents = false\r\n  } = _temp === void 0 ? {} : _temp;\r\n  let timeoutId;\r\n  let isInsideRect = false;\r\n  let hasLanded = false;\r\n  const fn = _ref => {\r\n    let {\r\n      x,\r\n      y,\r\n      placement,\r\n      elements,\r\n      onClose,\r\n      nodeId,\r\n      tree\r\n    } = _ref;\r\n    return function onMouseMove(event) {\r\n      function close() {\r\n        clearTimeout(timeoutId);\r\n        onClose();\r\n      }\r\n      clearTimeout(timeoutId);\r\n      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\r\n        return;\r\n      }\r\n      const {\r\n        clientX,\r\n        clientY\r\n      } = event;\r\n      const clientPoint = [clientX, clientY];\r\n      const target = getTarget(event);\r\n      const isLeave = event.type === 'mouseleave';\r\n      const isOverFloatingEl = contains(elements.floating, target);\r\n      const isOverReferenceEl = contains(elements.domReference, target);\r\n      const refRect = elements.domReference.getBoundingClientRect();\r\n      const rect = elements.floating.getBoundingClientRect();\r\n      const side = placement.split('-')[0];\r\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\r\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\r\n      const isOverReferenceRect = isInside(clientPoint, refRect);\r\n      if (isOverFloatingEl) {\r\n        hasLanded = true;\r\n      }\r\n      if (isOverReferenceEl) {\r\n        hasLanded = false;\r\n      }\r\n      if (isOverReferenceEl && !isLeave) {\r\n        hasLanded = true;\r\n        return;\r\n      }\r\n\r\n      // Prevent overlapping floating element from being stuck in an open-close\r\n      // loop: https://github.com/floating-ui/floating-ui/issues/1910\r\n      if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {\r\n        return;\r\n      }\r\n\r\n      // If any nested child is open, abort.\r\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {\r\n        let {\r\n          context\r\n        } = _ref2;\r\n        return context == null ? void 0 : context.open;\r\n      })) {\r\n        return;\r\n      }\r\n\r\n      // If the pointer is leaving from the opposite side, the \"buffer\" logic\r\n      // creates a point where the floating element remains open, but should be\r\n      // ignored.\r\n      // A constant of 1 handles floating point rounding errors.\r\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\r\n        return close();\r\n      }\r\n\r\n      // Ignore when the cursor is within the rectangular trough between the\r\n      // two elements. Since the triangle is created from the cursor point,\r\n      // which can start beyond the ref element's edge, traversing back and\r\n      // forth from the ref to the floating element can cause it to close. This\r\n      // ensures it always remains open in that case.\r\n      let rectPoly = [];\r\n      switch (side) {\r\n        case 'top':\r\n          rectPoly = [[rect.left, refRect.top + 1], [rect.left, rect.bottom - 1], [rect.right, rect.bottom - 1], [rect.right, refRect.top + 1]];\r\n          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= refRect.top + 1;\r\n          break;\r\n        case 'bottom':\r\n          rectPoly = [[rect.left, rect.top + 1], [rect.left, refRect.bottom - 1], [rect.right, refRect.bottom - 1], [rect.right, rect.top + 1]];\r\n          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= refRect.bottom - 1 && clientY <= rect.bottom;\r\n          break;\r\n        case 'left':\r\n          rectPoly = [[rect.right - 1, rect.bottom], [rect.right - 1, rect.top], [refRect.left + 1, rect.top], [refRect.left + 1, rect.bottom]];\r\n          isInsideRect = clientX >= rect.left && clientX <= refRect.left + 1 && clientY >= rect.top && clientY <= rect.bottom;\r\n          break;\r\n        case 'right':\r\n          rectPoly = [[refRect.right - 1, rect.bottom], [refRect.right - 1, rect.top], [rect.left + 1, rect.top], [rect.left + 1, rect.bottom]];\r\n          isInsideRect = clientX >= refRect.right - 1 && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom;\r\n          break;\r\n      }\r\n      function getPolygon(_ref3) {\r\n        let [x, y] = _ref3;\r\n        const isFloatingWider = rect.width > refRect.width;\r\n        const isFloatingTaller = rect.height > refRect.height;\r\n        switch (side) {\r\n          case 'top':\r\n            {\r\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\r\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\r\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n          case 'bottom':\r\n            {\r\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\r\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\r\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n          case 'left':\r\n            {\r\n              const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\r\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\r\n            }\r\n          case 'right':\r\n            {\r\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n        }\r\n      }\r\n      const poly = isInsideRect ? rectPoly : getPolygon([x, y]);\r\n      if (isInsideRect) {\r\n        return;\r\n      } else if (hasLanded && !isOverReferenceRect) {\r\n        return close();\r\n      }\r\n      if (!isPointInPolygon([clientX, clientY], poly)) {\r\n        close();\r\n      } else if (restMs && !hasLanded) {\r\n        timeoutId = setTimeout(close, restMs);\r\n      }\r\n    };\r\n  };\r\n  fn.__options = {\r\n    blockPointerEvents\r\n  };\r\n  return fn;\r\n}\r\n\r\nfunction useFloating(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    open = false,\r\n    onOpenChange: unstable_onOpenChange,\r\n    nodeId\r\n  } = options;\r\n  const position = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.useFloating)(options);\r\n  const tree = useFloatingTree();\r\n  const domReferenceRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const dataRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef({});\r\n  const events = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => createPubSub())[0];\r\n  const [domReference, setDomReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n  const setPositionReference = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    const positionReference = isElement(node) ? {\r\n      getBoundingClientRect: () => node.getBoundingClientRect(),\r\n      contextElement: node\r\n    } : node;\r\n    position.refs.setReference(positionReference);\r\n  }, [position.refs]);\r\n  const setReference = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    if (isElement(node) || node === null) {\r\n      domReferenceRef.current = node;\r\n      setDomReference(node);\r\n    }\r\n\r\n    // Backwards-compatibility for passing a virtual element to `reference`\r\n    // after it has set the DOM reference.\r\n    if (isElement(position.refs.reference.current) || position.refs.reference.current === null ||\r\n    // Don't allow setting virtual elements using the old technique back to\r\n    // `null` to support `positionReference` + an unstable `reference`\r\n    // callback ref.\r\n    node !== null && !isElement(node)) {\r\n      position.refs.setReference(node);\r\n    }\r\n  }, [position.refs]);\r\n  const refs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ...position.refs,\r\n    setReference,\r\n    setPositionReference,\r\n    domReference: domReferenceRef\r\n  }), [position.refs, setReference, setPositionReference]);\r\n  const elements = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ...position.elements,\r\n    domReference: domReference\r\n  }), [position.elements, domReference]);\r\n  const onOpenChange = useEvent(unstable_onOpenChange);\r\n  const context = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ...position,\r\n    refs,\r\n    elements,\r\n    dataRef,\r\n    nodeId,\r\n    events,\r\n    open,\r\n    onOpenChange\r\n  }), [position, nodeId, events, open, onOpenChange, refs, elements]);\r\n  index(() => {\r\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\r\n    if (node) {\r\n      node.context = context;\r\n    }\r\n  });\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ...position,\r\n    context,\r\n    refs,\r\n    reference: setReference,\r\n    positionReference: setPositionReference\r\n  }), [position, refs, context, setReference, setPositionReference]);\r\n}\r\n\r\nfunction mergeProps(userProps, propsList, elementKey) {\r\n  const map = new Map();\r\n  return {\r\n    ...(elementKey === 'floating' && {\r\n      tabIndex: -1\r\n    }),\r\n    ...userProps,\r\n    ...propsList.map(value => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {\r\n      if (!props) {\r\n        return acc;\r\n      }\r\n      Object.entries(props).forEach(_ref => {\r\n        let [key, value] = _ref;\r\n        if (key.indexOf('on') === 0) {\r\n          if (!map.has(key)) {\r\n            map.set(key, []);\r\n          }\r\n          if (typeof value === 'function') {\r\n            var _map$get;\r\n            (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);\r\n            acc[key] = function () {\r\n              var _map$get2;\r\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                args[_key] = arguments[_key];\r\n              }\r\n              (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.forEach(fn => fn(...args));\r\n            };\r\n          }\r\n        } else {\r\n          acc[key] = value;\r\n        }\r\n      });\r\n      return acc;\r\n    }, {})\r\n  };\r\n}\r\nconst useInteractions = function (propsList) {\r\n  if (propsList === void 0) {\r\n    propsList = [];\r\n  }\r\n  // The dependencies are a dynamic array, so we can't use the linter's\r\n  // suggestion to add it to the deps array.\r\n  const deps = propsList;\r\n  const getReferenceProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'reference'),\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  deps);\r\n  const getFloatingProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'floating'),\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  deps);\r\n  const getItemProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'item'),\r\n  // Granularly check for `item` changes, because the `getItemProps` getter\r\n  // should be as referentially stable as possible since it may be passed as\r\n  // a prop to many components. All `item` key values must therefore be\r\n  // memoized.\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  propsList.map(key => key == null ? void 0 : key.item));\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    getReferenceProps,\r\n    getFloatingProps,\r\n    getItemProps\r\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\r\n};\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/react/dist/floating-ui.react.esm.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/core/dist/floating-ui.core.mjs":
/*!*******************************************************************!*\
  !*** ../node_modules/@floating-ui/core/dist/floating-ui.core.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrow: () => (/* binding */ arrow),\n/* harmony export */   autoPlacement: () => (/* binding */ autoPlacement),\n/* harmony export */   computePosition: () => (/* binding */ computePosition),\n/* harmony export */   detectOverflow: () => (/* binding */ detectOverflow),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   hide: () => (/* binding */ hide),\n/* harmony export */   inline: () => (/* binding */ inline),\n/* harmony export */   limitShift: () => (/* binding */ limitShift),\n/* harmony export */   offset: () => (/* binding */ offset),\n/* harmony export */   rectToClientRect: () => (/* reexport safe */ _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect),\n/* harmony export */   shift: () => (/* binding */ shift),\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/utils */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n\r\n\r\n\r\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\r\n  let {\r\n    reference,\r\n    floating\r\n  } = _ref;\r\n  const sideAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement);\r\n  const alignmentAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentAxis)(placement);\r\n  const alignLength = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAxisLength)(alignmentAxis);\r\n  const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\r\n  const isVertical = sideAxis === 'y';\r\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\r\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\r\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\r\n  let coords;\r\n  switch (side) {\r\n    case 'top':\r\n      coords = {\r\n        x: commonX,\r\n        y: reference.y - floating.height\r\n      };\r\n      break;\r\n    case 'bottom':\r\n      coords = {\r\n        x: commonX,\r\n        y: reference.y + reference.height\r\n      };\r\n      break;\r\n    case 'right':\r\n      coords = {\r\n        x: reference.x + reference.width,\r\n        y: commonY\r\n      };\r\n      break;\r\n    case 'left':\r\n      coords = {\r\n        x: reference.x - floating.width,\r\n        y: commonY\r\n      };\r\n      break;\r\n    default:\r\n      coords = {\r\n        x: reference.x,\r\n        y: reference.y\r\n      };\r\n  }\r\n  switch ((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement)) {\r\n    case 'start':\r\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\r\n      break;\r\n    case 'end':\r\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\r\n      break;\r\n  }\r\n  return coords;\r\n}\r\n\r\n/**\r\n * Computes the `x` and `y` coordinates that will place the floating element\r\n * next to a given reference element.\r\n *\r\n * This export does not have any `platform` interface logic. You will need to\r\n * write one for the platform you are using Floating UI with.\r\n */\r\nconst computePosition = async (reference, floating, config) => {\r\n  const {\r\n    placement = 'bottom',\r\n    strategy = 'absolute',\r\n    middleware = [],\r\n    platform\r\n  } = config;\r\n  const validMiddleware = middleware.filter(Boolean);\r\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\r\n  let rects = await platform.getElementRects({\r\n    reference,\r\n    floating,\r\n    strategy\r\n  });\r\n  let {\r\n    x,\r\n    y\r\n  } = computeCoordsFromPlacement(rects, placement, rtl);\r\n  let statefulPlacement = placement;\r\n  let middlewareData = {};\r\n  let resetCount = 0;\r\n  for (let i = 0; i < validMiddleware.length; i++) {\r\n    const {\r\n      name,\r\n      fn\r\n    } = validMiddleware[i];\r\n    const {\r\n      x: nextX,\r\n      y: nextY,\r\n      data,\r\n      reset\r\n    } = await fn({\r\n      x,\r\n      y,\r\n      initialPlacement: placement,\r\n      placement: statefulPlacement,\r\n      strategy,\r\n      middlewareData,\r\n      rects,\r\n      platform,\r\n      elements: {\r\n        reference,\r\n        floating\r\n      }\r\n    });\r\n    x = nextX != null ? nextX : x;\r\n    y = nextY != null ? nextY : y;\r\n    middlewareData = {\r\n      ...middlewareData,\r\n      [name]: {\r\n        ...middlewareData[name],\r\n        ...data\r\n      }\r\n    };\r\n    if (reset && resetCount <= 50) {\r\n      resetCount++;\r\n      if (typeof reset === 'object') {\r\n        if (reset.placement) {\r\n          statefulPlacement = reset.placement;\r\n        }\r\n        if (reset.rects) {\r\n          rects = reset.rects === true ? await platform.getElementRects({\r\n            reference,\r\n            floating,\r\n            strategy\r\n          }) : reset.rects;\r\n        }\r\n        ({\r\n          x,\r\n          y\r\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\r\n      }\r\n      i = -1;\r\n    }\r\n  }\r\n  return {\r\n    x,\r\n    y,\r\n    placement: statefulPlacement,\r\n    strategy,\r\n    middlewareData\r\n  };\r\n};\r\n\r\n/**\r\n * Resolves with an object of overflow side offsets that determine how much the\r\n * element is overflowing a given clipping boundary on each side.\r\n * - positive = overflowing the boundary by that number of pixels\r\n * - negative = how many pixels left before it will overflow\r\n * - 0 = lies flush with the boundary\r\n * @see https://floating-ui.com/docs/detectOverflow\r\n */\r\nasync function detectOverflow(state, options) {\r\n  var _await$platform$isEle;\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    x,\r\n    y,\r\n    platform,\r\n    rects,\r\n    elements,\r\n    strategy\r\n  } = state;\r\n  const {\r\n    boundary = 'clippingAncestors',\r\n    rootBoundary = 'viewport',\r\n    elementContext = 'floating',\r\n    altBoundary = false,\r\n    padding = 0\r\n  } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n  const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\r\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\r\n  const element = elements[altBoundary ? altContext : elementContext];\r\n  const clippingClientRect = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(await platform.getClippingRect({\r\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\r\n    boundary,\r\n    rootBoundary,\r\n    strategy\r\n  }));\r\n  const rect = elementContext === 'floating' ? {\r\n    x,\r\n    y,\r\n    width: rects.floating.width,\r\n    height: rects.floating.height\r\n  } : rects.reference;\r\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\r\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\r\n    x: 1,\r\n    y: 1\r\n  } : {\r\n    x: 1,\r\n    y: 1\r\n  };\r\n  const elementClientRect = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\r\n    elements,\r\n    rect,\r\n    offsetParent,\r\n    strategy\r\n  }) : rect);\r\n  return {\r\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\r\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\r\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\r\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\r\n  };\r\n}\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow = options => ({\r\n  name: 'arrow',\r\n  options,\r\n  async fn(state) {\r\n    const {\r\n      x,\r\n      y,\r\n      placement,\r\n      rects,\r\n      platform,\r\n      elements,\r\n      middlewareData\r\n    } = state;\r\n    // Since `element` is required, we don't Partial<> the type.\r\n    const {\r\n      element,\r\n      padding = 0\r\n    } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state) || {};\r\n    if (element == null) {\r\n      return {};\r\n    }\r\n    const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\r\n    const coords = {\r\n      x,\r\n      y\r\n    };\r\n    const axis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentAxis)(placement);\r\n    const length = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAxisLength)(axis);\r\n    const arrowDimensions = await platform.getDimensions(element);\r\n    const isYAxis = axis === 'y';\r\n    const minProp = isYAxis ? 'top' : 'left';\r\n    const maxProp = isYAxis ? 'bottom' : 'right';\r\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\r\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\r\n    const startDiff = coords[axis] - rects.reference[axis];\r\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\r\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\r\n\r\n    // DOM platform can return `window` as the `offsetParent`.\r\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\r\n      clientSize = elements.floating[clientProp] || rects.floating[length];\r\n    }\r\n    const centerToReference = endDiff / 2 - startDiff / 2;\r\n\r\n    // If the padding is large enough that it causes the arrow to no longer be\r\n    // centered, modify the padding so that it is centered.\r\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\r\n    const minPadding = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(paddingObject[minProp], largestPossiblePadding);\r\n    const maxPadding = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(paddingObject[maxProp], largestPossiblePadding);\r\n\r\n    // Make sure the arrow doesn't overflow the floating element if the center\r\n    // point is outside the floating element's bounds.\r\n    const min$1 = minPadding;\r\n    const max = clientSize - arrowDimensions[length] - maxPadding;\r\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\r\n    const offset = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min$1, center, max);\r\n\r\n    // If the reference is small enough that the arrow's padding causes it to\r\n    // to point to nothing for an aligned placement, adjust the offset of the\r\n    // floating element itself. To ensure `shift()` continues to take action,\r\n    // a single reset is performed when this is true.\r\n    const shouldAddOffset = !middlewareData.arrow && (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\r\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\r\n    return {\r\n      [axis]: coords[axis] + alignmentOffset,\r\n      data: {\r\n        [axis]: offset,\r\n        centerOffset: center - offset - alignmentOffset,\r\n        ...(shouldAddOffset && {\r\n          alignmentOffset\r\n        })\r\n      },\r\n      reset: shouldAddOffset\r\n    };\r\n  }\r\n});\r\n\r\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\r\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) === alignment), ...allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) !== alignment)] : allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === placement);\r\n  return allowedPlacementsSortedByAlignment.filter(placement => {\r\n    if (alignment) {\r\n      return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) === alignment || (autoAlignment ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAlignmentPlacement)(placement) !== placement : false);\r\n    }\r\n    return true;\r\n  });\r\n}\r\n/**\r\n * Optimizes the visibility of the floating element by choosing the placement\r\n * that has the most space available automatically, without needing to specify a\r\n * preferred placement. Alternative to `flip`.\r\n * @see https://floating-ui.com/docs/autoPlacement\r\n */\r\nconst autoPlacement = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'autoPlacement',\r\n    options,\r\n    async fn(state) {\r\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\r\n      const {\r\n        rects,\r\n        middlewareData,\r\n        placement,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        crossAxis = false,\r\n        alignment,\r\n        allowedPlacements = _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.placements,\r\n        autoAlignment = true,\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const placements$1 = alignment !== undefined || allowedPlacements === _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\r\n      const currentPlacement = placements$1[currentIndex];\r\n      if (currentPlacement == null) {\r\n        return {};\r\n      }\r\n      const alignmentSides = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentSides)(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\r\n\r\n      // Make `computeCoords` start from the right place.\r\n      if (placement !== currentPlacement) {\r\n        return {\r\n          reset: {\r\n            placement: placements$1[0]\r\n          }\r\n        };\r\n      }\r\n      const currentOverflows = [overflow[(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\r\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\r\n        placement: currentPlacement,\r\n        overflows: currentOverflows\r\n      }];\r\n      const nextPlacement = placements$1[currentIndex + 1];\r\n\r\n      // There are more placements to check.\r\n      if (nextPlacement) {\r\n        return {\r\n          data: {\r\n            index: currentIndex + 1,\r\n            overflows: allOverflows\r\n          },\r\n          reset: {\r\n            placement: nextPlacement\r\n          }\r\n        };\r\n      }\r\n      const placementsSortedByMostSpace = allOverflows.map(d => {\r\n        const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(d.placement);\r\n        return [d.placement, alignment && crossAxis ?\r\n        // Check along the mainAxis and main crossAxis side.\r\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\r\n        // Check only the mainAxis.\r\n        d.overflows[0], d.overflows];\r\n      }).sort((a, b) => a[1] - b[1]);\r\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\r\n      // Aligned placements should not check their opposite crossAxis\r\n      // side.\r\n      (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(d[0]) ? 2 : 3).every(v => v <= 0));\r\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\r\n      if (resetPlacement !== placement) {\r\n        return {\r\n          data: {\r\n            index: currentIndex + 1,\r\n            overflows: allOverflows\r\n          },\r\n          reset: {\r\n            placement: resetPlacement\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by flipping the `placement`\r\n * in order to keep it in view when the preferred placement(s) will overflow the\r\n * clipping boundary. Alternative to `autoPlacement`.\r\n * @see https://floating-ui.com/docs/flip\r\n */\r\nconst flip = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'flip',\r\n    options,\r\n    async fn(state) {\r\n      var _middlewareData$arrow, _middlewareData$flip;\r\n      const {\r\n        placement,\r\n        middlewareData,\r\n        rects,\r\n        initialPlacement,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = true,\r\n        fallbackPlacements: specifiedFallbackPlacements,\r\n        fallbackStrategy = 'bestFit',\r\n        fallbackAxisSideDirection = 'none',\r\n        flipAlignment = true,\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n\r\n      // If a reset by the arrow was caused due to an alignment offset being\r\n      // added, we should skip any logic now since `flip()` has already done its\r\n      // work.\r\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\r\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\r\n        return {};\r\n      }\r\n      const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\r\n      const initialSideAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(initialPlacement);\r\n      const isBasePlacement = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(initialPlacement) === initialPlacement;\r\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\r\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositePlacement)(initialPlacement)] : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getExpandedPlacements)(initialPlacement));\r\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\r\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\r\n        fallbackPlacements.push(...(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxisPlacements)(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\r\n      }\r\n      const placements = [initialPlacement, ...fallbackPlacements];\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const overflows = [];\r\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\r\n      if (checkMainAxis) {\r\n        overflows.push(overflow[side]);\r\n      }\r\n      if (checkCrossAxis) {\r\n        const sides = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentSides)(placement, rects, rtl);\r\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\r\n      }\r\n      overflowsData = [...overflowsData, {\r\n        placement,\r\n        overflows\r\n      }];\r\n\r\n      // One or more sides is overflowing.\r\n      if (!overflows.every(side => side <= 0)) {\r\n        var _middlewareData$flip2, _overflowsData$filter;\r\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\r\n        const nextPlacement = placements[nextIndex];\r\n        if (nextPlacement) {\r\n          // Try next placement and re-run the lifecycle.\r\n          return {\r\n            data: {\r\n              index: nextIndex,\r\n              overflows: overflowsData\r\n            },\r\n            reset: {\r\n              placement: nextPlacement\r\n            }\r\n          };\r\n        }\r\n\r\n        // First, find the candidates that fit on the mainAxis side of overflow,\r\n        // then find the placement that fits the best on the main crossAxis side.\r\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\r\n\r\n        // Otherwise fallback.\r\n        if (!resetPlacement) {\r\n          switch (fallbackStrategy) {\r\n            case 'bestFit':\r\n              {\r\n                var _overflowsData$filter2;\r\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\r\n                  if (hasFallbackAxisSideDirection) {\r\n                    const currentSideAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(d.placement);\r\n                    return currentSideAxis === initialSideAxis ||\r\n                    // Create a bias to the `y` side axis due to horizontal\r\n                    // reading directions favoring greater width.\r\n                    currentSideAxis === 'y';\r\n                  }\r\n                  return true;\r\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\r\n                if (placement) {\r\n                  resetPlacement = placement;\r\n                }\r\n                break;\r\n              }\r\n            case 'initialPlacement':\r\n              resetPlacement = initialPlacement;\r\n              break;\r\n          }\r\n        }\r\n        if (placement !== resetPlacement) {\r\n          return {\r\n            reset: {\r\n              placement: resetPlacement\r\n            }\r\n          };\r\n        }\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\nfunction getSideOffsets(overflow, rect) {\r\n  return {\r\n    top: overflow.top - rect.height,\r\n    right: overflow.right - rect.width,\r\n    bottom: overflow.bottom - rect.height,\r\n    left: overflow.left - rect.width\r\n  };\r\n}\r\nfunction isAnySideFullyClipped(overflow) {\r\n  return _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.sides.some(side => overflow[side] >= 0);\r\n}\r\n/**\r\n * Provides data to hide the floating element in applicable situations, such as\r\n * when it is not in the same clipping context as the reference element.\r\n * @see https://floating-ui.com/docs/hide\r\n */\r\nconst hide = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'hide',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        rects\r\n      } = state;\r\n      const {\r\n        strategy = 'referenceHidden',\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      switch (strategy) {\r\n        case 'referenceHidden':\r\n          {\r\n            const overflow = await detectOverflow(state, {\r\n              ...detectOverflowOptions,\r\n              elementContext: 'reference'\r\n            });\r\n            const offsets = getSideOffsets(overflow, rects.reference);\r\n            return {\r\n              data: {\r\n                referenceHiddenOffsets: offsets,\r\n                referenceHidden: isAnySideFullyClipped(offsets)\r\n              }\r\n            };\r\n          }\r\n        case 'escaped':\r\n          {\r\n            const overflow = await detectOverflow(state, {\r\n              ...detectOverflowOptions,\r\n              altBoundary: true\r\n            });\r\n            const offsets = getSideOffsets(overflow, rects.floating);\r\n            return {\r\n              data: {\r\n                escapedOffsets: offsets,\r\n                escaped: isAnySideFullyClipped(offsets)\r\n              }\r\n            };\r\n          }\r\n        default:\r\n          {\r\n            return {};\r\n          }\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nfunction getBoundingRect(rects) {\r\n  const minX = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...rects.map(rect => rect.left));\r\n  const minY = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...rects.map(rect => rect.top));\r\n  const maxX = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...rects.map(rect => rect.right));\r\n  const maxY = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...rects.map(rect => rect.bottom));\r\n  return {\r\n    x: minX,\r\n    y: minY,\r\n    width: maxX - minX,\r\n    height: maxY - minY\r\n  };\r\n}\r\nfunction getRectsByLine(rects) {\r\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\r\n  const groups = [];\r\n  let prevRect = null;\r\n  for (let i = 0; i < sortedRects.length; i++) {\r\n    const rect = sortedRects[i];\r\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\r\n      groups.push([rect]);\r\n    } else {\r\n      groups[groups.length - 1].push(rect);\r\n    }\r\n    prevRect = rect;\r\n  }\r\n  return groups.map(rect => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(getBoundingRect(rect)));\r\n}\r\n/**\r\n * Provides improved positioning for inline reference elements that can span\r\n * over multiple lines, such as hyperlinks or range selections.\r\n * @see https://floating-ui.com/docs/inline\r\n */\r\nconst inline = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'inline',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        placement,\r\n        elements,\r\n        rects,\r\n        platform,\r\n        strategy\r\n      } = state;\r\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\r\n      // ClientRect's bounds, despite the event listener being triggered. A\r\n      // padding of 2 seems to handle this issue.\r\n      const {\r\n        padding = 2,\r\n        x,\r\n        y\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\r\n      const clientRects = getRectsByLine(nativeClientRects);\r\n      const fallback = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(getBoundingRect(nativeClientRects));\r\n      const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\r\n      function getBoundingClientRect() {\r\n        // There are two rects and they are disjoined.\r\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\r\n          // Find the first rect in which the point is fully inside.\r\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\r\n        }\r\n\r\n        // There are 2 or more connected rects.\r\n        if (clientRects.length >= 2) {\r\n          if ((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y') {\r\n            const firstRect = clientRects[0];\r\n            const lastRect = clientRects[clientRects.length - 1];\r\n            const isTop = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === 'top';\r\n            const top = firstRect.top;\r\n            const bottom = lastRect.bottom;\r\n            const left = isTop ? firstRect.left : lastRect.left;\r\n            const right = isTop ? firstRect.right : lastRect.right;\r\n            const width = right - left;\r\n            const height = bottom - top;\r\n            return {\r\n              top,\r\n              bottom,\r\n              left,\r\n              right,\r\n              width,\r\n              height,\r\n              x: left,\r\n              y: top\r\n            };\r\n          }\r\n          const isLeftSide = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === 'left';\r\n          const maxRight = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...clientRects.map(rect => rect.right));\r\n          const minLeft = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...clientRects.map(rect => rect.left));\r\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\r\n          const top = measureRects[0].top;\r\n          const bottom = measureRects[measureRects.length - 1].bottom;\r\n          const left = minLeft;\r\n          const right = maxRight;\r\n          const width = right - left;\r\n          const height = bottom - top;\r\n          return {\r\n            top,\r\n            bottom,\r\n            left,\r\n            right,\r\n            width,\r\n            height,\r\n            x: left,\r\n            y: top\r\n          };\r\n        }\r\n        return fallback;\r\n      }\r\n      const resetRects = await platform.getElementRects({\r\n        reference: {\r\n          getBoundingClientRect\r\n        },\r\n        floating: elements.floating,\r\n        strategy\r\n      });\r\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\r\n        return {\r\n          reset: {\r\n            rects: resetRects\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n// For type backwards-compatibility, the `OffsetOptions` type was also\r\n// Derivable.\r\n\r\nasync function convertValueToCoords(state, options) {\r\n  const {\r\n    placement,\r\n    platform,\r\n    elements\r\n  } = state;\r\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\r\n  const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\r\n  const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement);\r\n  const isVertical = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y';\r\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\r\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\r\n  const rawValue = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n\r\n  // eslint-disable-next-line prefer-const\r\n  let {\r\n    mainAxis,\r\n    crossAxis,\r\n    alignmentAxis\r\n  } = typeof rawValue === 'number' ? {\r\n    mainAxis: rawValue,\r\n    crossAxis: 0,\r\n    alignmentAxis: null\r\n  } : {\r\n    mainAxis: rawValue.mainAxis || 0,\r\n    crossAxis: rawValue.crossAxis || 0,\r\n    alignmentAxis: rawValue.alignmentAxis\r\n  };\r\n  if (alignment && typeof alignmentAxis === 'number') {\r\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\r\n  }\r\n  return isVertical ? {\r\n    x: crossAxis * crossAxisMulti,\r\n    y: mainAxis * mainAxisMulti\r\n  } : {\r\n    x: mainAxis * mainAxisMulti,\r\n    y: crossAxis * crossAxisMulti\r\n  };\r\n}\r\n\r\n/**\r\n * Modifies the placement by translating the floating element along the\r\n * specified axes.\r\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\r\n * object may be passed.\r\n * @see https://floating-ui.com/docs/offset\r\n */\r\nconst offset = function (options) {\r\n  if (options === void 0) {\r\n    options = 0;\r\n  }\r\n  return {\r\n    name: 'offset',\r\n    options,\r\n    async fn(state) {\r\n      var _middlewareData$offse, _middlewareData$arrow;\r\n      const {\r\n        x,\r\n        y,\r\n        placement,\r\n        middlewareData\r\n      } = state;\r\n      const diffCoords = await convertValueToCoords(state, options);\r\n\r\n      // If the placement is the same and the arrow caused an alignment offset\r\n      // then we don't need to change the positioning coordinates.\r\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\r\n        return {};\r\n      }\r\n      return {\r\n        x: x + diffCoords.x,\r\n        y: y + diffCoords.y,\r\n        data: {\r\n          ...diffCoords,\r\n          placement\r\n        }\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by shifting it in order to\r\n * keep it in view when it will overflow the clipping boundary.\r\n * @see https://floating-ui.com/docs/shift\r\n */\r\nconst shift = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'shift',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        x,\r\n        y,\r\n        placement\r\n      } = state;\r\n      const {\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = false,\r\n        limiter = {\r\n          fn: _ref => {\r\n            let {\r\n              x,\r\n              y\r\n            } = _ref;\r\n            return {\r\n              x,\r\n              y\r\n            };\r\n          }\r\n        },\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const coords = {\r\n        x,\r\n        y\r\n      };\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const crossAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement));\r\n      const mainAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxis)(crossAxis);\r\n      let mainAxisCoord = coords[mainAxis];\r\n      let crossAxisCoord = coords[crossAxis];\r\n      if (checkMainAxis) {\r\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\r\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\r\n        const min = mainAxisCoord + overflow[minSide];\r\n        const max = mainAxisCoord - overflow[maxSide];\r\n        mainAxisCoord = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min, mainAxisCoord, max);\r\n      }\r\n      if (checkCrossAxis) {\r\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\r\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\r\n        const min = crossAxisCoord + overflow[minSide];\r\n        const max = crossAxisCoord - overflow[maxSide];\r\n        crossAxisCoord = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min, crossAxisCoord, max);\r\n      }\r\n      const limitedCoords = limiter.fn({\r\n        ...state,\r\n        [mainAxis]: mainAxisCoord,\r\n        [crossAxis]: crossAxisCoord\r\n      });\r\n      return {\r\n        ...limitedCoords,\r\n        data: {\r\n          x: limitedCoords.x - x,\r\n          y: limitedCoords.y - y,\r\n          enabled: {\r\n            [mainAxis]: checkMainAxis,\r\n            [crossAxis]: checkCrossAxis\r\n          }\r\n        }\r\n      };\r\n    }\r\n  };\r\n};\r\n/**\r\n * Built-in `limiter` that will stop `shift()` at a certain point.\r\n */\r\nconst limitShift = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    options,\r\n    fn(state) {\r\n      const {\r\n        x,\r\n        y,\r\n        placement,\r\n        rects,\r\n        middlewareData\r\n      } = state;\r\n      const {\r\n        offset = 0,\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = true\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const coords = {\r\n        x,\r\n        y\r\n      };\r\n      const crossAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement);\r\n      const mainAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxis)(crossAxis);\r\n      let mainAxisCoord = coords[mainAxis];\r\n      let crossAxisCoord = coords[crossAxis];\r\n      const rawOffset = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(offset, state);\r\n      const computedOffset = typeof rawOffset === 'number' ? {\r\n        mainAxis: rawOffset,\r\n        crossAxis: 0\r\n      } : {\r\n        mainAxis: 0,\r\n        crossAxis: 0,\r\n        ...rawOffset\r\n      };\r\n      if (checkMainAxis) {\r\n        const len = mainAxis === 'y' ? 'height' : 'width';\r\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\r\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\r\n        if (mainAxisCoord < limitMin) {\r\n          mainAxisCoord = limitMin;\r\n        } else if (mainAxisCoord > limitMax) {\r\n          mainAxisCoord = limitMax;\r\n        }\r\n      }\r\n      if (checkCrossAxis) {\r\n        var _middlewareData$offse, _middlewareData$offse2;\r\n        const len = mainAxis === 'y' ? 'width' : 'height';\r\n        const isOriginSide = ['top', 'left'].includes((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement));\r\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\r\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\r\n        if (crossAxisCoord < limitMin) {\r\n          crossAxisCoord = limitMin;\r\n        } else if (crossAxisCoord > limitMax) {\r\n          crossAxisCoord = limitMax;\r\n        }\r\n      }\r\n      return {\r\n        [mainAxis]: mainAxisCoord,\r\n        [crossAxis]: crossAxisCoord\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Provides data that allows you to change the size of the floating element —\r\n * for instance, prevent it from overflowing the clipping boundary or match the\r\n * width of the reference element.\r\n * @see https://floating-ui.com/docs/size\r\n */\r\nconst size = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'size',\r\n    options,\r\n    async fn(state) {\r\n      var _state$middlewareData, _state$middlewareData2;\r\n      const {\r\n        placement,\r\n        rects,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        apply = () => {},\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\r\n      const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement);\r\n      const isYAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y';\r\n      const {\r\n        width,\r\n        height\r\n      } = rects.floating;\r\n      let heightSide;\r\n      let widthSide;\r\n      if (side === 'top' || side === 'bottom') {\r\n        heightSide = side;\r\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\r\n      } else {\r\n        widthSide = side;\r\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\r\n      }\r\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\r\n      const maximumClippingWidth = width - overflow.left - overflow.right;\r\n      const overflowAvailableHeight = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(height - overflow[heightSide], maximumClippingHeight);\r\n      const overflowAvailableWidth = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(width - overflow[widthSide], maximumClippingWidth);\r\n      const noShift = !state.middlewareData.shift;\r\n      let availableHeight = overflowAvailableHeight;\r\n      let availableWidth = overflowAvailableWidth;\r\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\r\n        availableWidth = maximumClippingWidth;\r\n      }\r\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\r\n        availableHeight = maximumClippingHeight;\r\n      }\r\n      if (noShift && !alignment) {\r\n        const xMin = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.left, 0);\r\n        const xMax = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.right, 0);\r\n        const yMin = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.top, 0);\r\n        const yMax = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.bottom, 0);\r\n        if (isYAxis) {\r\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.left, overflow.right));\r\n        } else {\r\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.top, overflow.bottom));\r\n        }\r\n      }\r\n      await apply({\r\n        ...state,\r\n        availableWidth,\r\n        availableHeight\r\n      });\r\n      const nextDimensions = await platform.getDimensions(elements.floating);\r\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\r\n        return {\r\n          reset: {\r\n            rects: true\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/core/dist/floating-ui.core.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs":
/*!*****************************************************************!*\
  !*** ../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrow: () => (/* binding */ arrow),\n/* harmony export */   autoPlacement: () => (/* binding */ autoPlacement),\n/* harmony export */   autoUpdate: () => (/* binding */ autoUpdate),\n/* harmony export */   computePosition: () => (/* binding */ computePosition),\n/* harmony export */   detectOverflow: () => (/* binding */ detectOverflow),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   getOverflowAncestors: () => (/* reexport safe */ _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getOverflowAncestors),\n/* harmony export */   hide: () => (/* binding */ hide),\n/* harmony export */   inline: () => (/* binding */ inline),\n/* harmony export */   limitShift: () => (/* binding */ limitShift),\n/* harmony export */   offset: () => (/* binding */ offset),\n/* harmony export */   platform: () => (/* binding */ platform),\n/* harmony export */   shift: () => (/* binding */ shift),\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/utils */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n/* harmony import */ var _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/core */ \"(ssr)/../node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/utils/dom */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n\r\n\r\n\r\n\r\n\r\nfunction getCssDimensions(element) {\r\n  const css = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element);\r\n  // In testing environments, the `width` and `height` properties are empty\r\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\r\n  let width = parseFloat(css.width) || 0;\r\n  let height = parseFloat(css.height) || 0;\r\n  const hasOffset = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element);\r\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\r\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\r\n  const shouldFallback = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.round)(width) !== offsetWidth || (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.round)(height) !== offsetHeight;\r\n  if (shouldFallback) {\r\n    width = offsetWidth;\r\n    height = offsetHeight;\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    $: shouldFallback\r\n  };\r\n}\r\n\r\nfunction unwrapElement(element) {\r\n  return !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.contextElement : element;\r\n}\r\n\r\nfunction getScale(element) {\r\n  const domElement = unwrapElement(element);\r\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(domElement)) {\r\n    return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(1);\r\n  }\r\n  const rect = domElement.getBoundingClientRect();\r\n  const {\r\n    width,\r\n    height,\r\n    $\r\n  } = getCssDimensions(domElement);\r\n  let x = ($ ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.round)(rect.width) : rect.width) / width;\r\n  let y = ($ ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.round)(rect.height) : rect.height) / height;\r\n\r\n  // 0, NaN, or Infinity should always fallback to 1.\r\n\r\n  if (!x || !Number.isFinite(x)) {\r\n    x = 1;\r\n  }\r\n  if (!y || !Number.isFinite(y)) {\r\n    y = 1;\r\n  }\r\n  return {\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\nconst noOffsets = /*#__PURE__*/(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\nfunction getVisualOffsets(element) {\r\n  const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(element);\r\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isWebKit)() || !win.visualViewport) {\r\n    return noOffsets;\r\n  }\r\n  return {\r\n    x: win.visualViewport.offsetLeft,\r\n    y: win.visualViewport.offsetTop\r\n  };\r\n}\r\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\r\n  if (isFixed === void 0) {\r\n    isFixed = false;\r\n  }\r\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(element)) {\r\n    return false;\r\n  }\r\n  return isFixed;\r\n}\r\n\r\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\r\n  if (includeScale === void 0) {\r\n    includeScale = false;\r\n  }\r\n  if (isFixedStrategy === void 0) {\r\n    isFixedStrategy = false;\r\n  }\r\n  const clientRect = element.getBoundingClientRect();\r\n  const domElement = unwrapElement(element);\r\n  let scale = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(1);\r\n  if (includeScale) {\r\n    if (offsetParent) {\r\n      if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(offsetParent)) {\r\n        scale = getScale(offsetParent);\r\n      }\r\n    } else {\r\n      scale = getScale(element);\r\n    }\r\n  }\r\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\r\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\r\n  let width = clientRect.width / scale.x;\r\n  let height = clientRect.height / scale.y;\r\n  if (domElement) {\r\n    const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(domElement);\r\n    const offsetWin = offsetParent && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(offsetParent) ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(offsetParent) : offsetParent;\r\n    let currentWin = win;\r\n    let currentIFrame = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getFrameElement)(currentWin);\r\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\r\n      const iframeScale = getScale(currentIFrame);\r\n      const iframeRect = currentIFrame.getBoundingClientRect();\r\n      const css = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(currentIFrame);\r\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\r\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\r\n      x *= iframeScale.x;\r\n      y *= iframeScale.y;\r\n      width *= iframeScale.x;\r\n      height *= iframeScale.y;\r\n      x += left;\r\n      y += top;\r\n      currentWin = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(currentIFrame);\r\n      currentIFrame = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getFrameElement)(currentWin);\r\n    }\r\n  }\r\n  return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.rectToClientRect)({\r\n    width,\r\n    height,\r\n    x,\r\n    y\r\n  });\r\n}\r\n\r\n// If <html> has a CSS width greater than the viewport, then this will be\r\n// incorrect for RTL.\r\nfunction getWindowScrollBarX(element, rect) {\r\n  const leftScroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeScroll)(element).scrollLeft;\r\n  if (!rect) {\r\n    return getBoundingClientRect((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element)).left + leftScroll;\r\n  }\r\n  return rect.left + leftScroll;\r\n}\r\n\r\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\r\n  if (ignoreScrollbarX === void 0) {\r\n    ignoreScrollbarX = false;\r\n  }\r\n  const htmlRect = documentElement.getBoundingClientRect();\r\n  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :\r\n  // RTL <body> scrollbar.\r\n  getWindowScrollBarX(documentElement, htmlRect));\r\n  const y = htmlRect.top + scroll.scrollTop;\r\n  return {\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\r\n  let {\r\n    elements,\r\n    rect,\r\n    offsetParent,\r\n    strategy\r\n  } = _ref;\r\n  const isFixed = strategy === 'fixed';\r\n  const documentElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(offsetParent);\r\n  const topLayer = elements ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isTopLayer)(elements.floating) : false;\r\n  if (offsetParent === documentElement || topLayer && isFixed) {\r\n    return rect;\r\n  }\r\n  let scroll = {\r\n    scrollLeft: 0,\r\n    scrollTop: 0\r\n  };\r\n  let scale = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(1);\r\n  const offsets = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\n  const isOffsetParentAnElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent);\r\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\r\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeName)(offsetParent) !== 'body' || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isOverflowElement)(documentElement)) {\r\n      scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeScroll)(offsetParent);\r\n    }\r\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent)) {\r\n      const offsetRect = getBoundingClientRect(offsetParent);\r\n      scale = getScale(offsetParent);\r\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\r\n      offsets.y = offsetRect.y + offsetParent.clientTop;\r\n    }\r\n  }\r\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\n  return {\r\n    width: rect.width * scale.x,\r\n    height: rect.height * scale.y,\r\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\r\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\r\n  };\r\n}\r\n\r\nfunction getClientRects(element) {\r\n  return Array.from(element.getClientRects());\r\n}\r\n\r\n// Gets the entire size of the scrollable document area, even extending outside\r\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\r\nfunction getDocumentRect(element) {\r\n  const html = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element);\r\n  const scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeScroll)(element);\r\n  const body = element.ownerDocument.body;\r\n  const width = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\r\n  const height = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\r\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\r\n  const y = -scroll.scrollTop;\r\n  if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(body).direction === 'rtl') {\r\n    x += (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(html.clientWidth, body.clientWidth) - width;\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\nfunction getViewportRect(element, strategy) {\r\n  const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(element);\r\n  const html = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element);\r\n  const visualViewport = win.visualViewport;\r\n  let width = html.clientWidth;\r\n  let height = html.clientHeight;\r\n  let x = 0;\r\n  let y = 0;\r\n  if (visualViewport) {\r\n    width = visualViewport.width;\r\n    height = visualViewport.height;\r\n    const visualViewportBased = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isWebKit)();\r\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\r\n      x = visualViewport.offsetLeft;\r\n      y = visualViewport.offsetTop;\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\n// Returns the inner client rect, subtracting scrollbars if present.\r\nfunction getInnerBoundingClientRect(element, strategy) {\r\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\r\n  const top = clientRect.top + element.clientTop;\r\n  const left = clientRect.left + element.clientLeft;\r\n  const scale = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) ? getScale(element) : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(1);\r\n  const width = element.clientWidth * scale.x;\r\n  const height = element.clientHeight * scale.y;\r\n  const x = left * scale.x;\r\n  const y = top * scale.y;\r\n  return {\r\n    width,\r\n    height,\r\n    x,\r\n    y\r\n  };\r\n}\r\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\r\n  let rect;\r\n  if (clippingAncestor === 'viewport') {\r\n    rect = getViewportRect(element, strategy);\r\n  } else if (clippingAncestor === 'document') {\r\n    rect = getDocumentRect((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element));\r\n  } else if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(clippingAncestor)) {\r\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\r\n  } else {\r\n    const visualOffsets = getVisualOffsets(element);\r\n    rect = {\r\n      x: clippingAncestor.x - visualOffsets.x,\r\n      y: clippingAncestor.y - visualOffsets.y,\r\n      width: clippingAncestor.width,\r\n      height: clippingAncestor.height\r\n    };\r\n  }\r\n  return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.rectToClientRect)(rect);\r\n}\r\nfunction hasFixedPositionAncestor(element, stopNode) {\r\n  const parentNode = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getParentNode)(element);\r\n  if (parentNode === stopNode || !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(parentNode) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isLastTraversableNode)(parentNode)) {\r\n    return false;\r\n  }\r\n  return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\r\n}\r\n\r\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\r\n// clipping (or hiding) child elements. This returns all clipping ancestors\r\n// of the given element up the tree.\r\nfunction getClippingElementAncestors(element, cache) {\r\n  const cachedResult = cache.get(element);\r\n  if (cachedResult) {\r\n    return cachedResult;\r\n  }\r\n  let result = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getOverflowAncestors)(element, [], false).filter(el => (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(el) && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeName)(el) !== 'body');\r\n  let currentContainingBlockComputedStyle = null;\r\n  const elementIsFixed = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element).position === 'fixed';\r\n  let currentNode = elementIsFixed ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getParentNode)(element) : element;\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\r\n  while ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(currentNode) && !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isLastTraversableNode)(currentNode)) {\r\n    const computedStyle = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(currentNode);\r\n    const currentNodeIsContaining = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isContainingBlock)(currentNode);\r\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\r\n      currentContainingBlockComputedStyle = null;\r\n    }\r\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isOverflowElement)(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\r\n    if (shouldDropCurrentNode) {\r\n      // Drop non-containing blocks.\r\n      result = result.filter(ancestor => ancestor !== currentNode);\r\n    } else {\r\n      // Record last containing block for next iteration.\r\n      currentContainingBlockComputedStyle = computedStyle;\r\n    }\r\n    currentNode = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getParentNode)(currentNode);\r\n  }\r\n  cache.set(element, result);\r\n  return result;\r\n}\r\n\r\n// Gets the maximum area that the element is visible in due to any number of\r\n// clipping ancestors.\r\nfunction getClippingRect(_ref) {\r\n  let {\r\n    element,\r\n    boundary,\r\n    rootBoundary,\r\n    strategy\r\n  } = _ref;\r\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isTopLayer)(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\r\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\r\n  const firstClippingAncestor = clippingAncestors[0];\r\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\r\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\r\n    accRect.top = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(rect.top, accRect.top);\r\n    accRect.right = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.min)(rect.right, accRect.right);\r\n    accRect.bottom = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.min)(rect.bottom, accRect.bottom);\r\n    accRect.left = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(rect.left, accRect.left);\r\n    return accRect;\r\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\r\n  return {\r\n    width: clippingRect.right - clippingRect.left,\r\n    height: clippingRect.bottom - clippingRect.top,\r\n    x: clippingRect.left,\r\n    y: clippingRect.top\r\n  };\r\n}\r\n\r\nfunction getDimensions(element) {\r\n  const {\r\n    width,\r\n    height\r\n  } = getCssDimensions(element);\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\r\n  const isOffsetParentAnElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent);\r\n  const documentElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(offsetParent);\r\n  const isFixed = strategy === 'fixed';\r\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\r\n  let scroll = {\r\n    scrollLeft: 0,\r\n    scrollTop: 0\r\n  };\r\n  const offsets = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\r\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeName)(offsetParent) !== 'body' || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isOverflowElement)(documentElement)) {\r\n      scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeScroll)(offsetParent);\r\n    }\r\n    if (isOffsetParentAnElement) {\r\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\r\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\r\n      offsets.y = offsetRect.y + offsetParent.clientTop;\r\n    } else if (documentElement) {\r\n      // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\r\n      // Firefox with layout.scrollbar.side = 3 in about:config to test this.\r\n      offsets.x = getWindowScrollBarX(documentElement);\r\n    }\r\n  }\r\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\r\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\r\n  return {\r\n    x,\r\n    y,\r\n    width: rect.width,\r\n    height: rect.height\r\n  };\r\n}\r\n\r\nfunction isStaticPositioned(element) {\r\n  return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element).position === 'static';\r\n}\r\n\r\nfunction getTrueOffsetParent(element, polyfill) {\r\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element).position === 'fixed') {\r\n    return null;\r\n  }\r\n  if (polyfill) {\r\n    return polyfill(element);\r\n  }\r\n  let rawOffsetParent = element.offsetParent;\r\n\r\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\r\n  // while Chrome and Safari return the <body> element. The <body> element must\r\n  // be used to perform the correct calculations even if the <html> element is\r\n  // non-static.\r\n  if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element) === rawOffsetParent) {\r\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\r\n  }\r\n  return rawOffsetParent;\r\n}\r\n\r\n// Gets the closest ancestor positioned element. Handles some edge cases,\r\n// such as table ancestors and cross browser bugs.\r\nfunction getOffsetParent(element, polyfill) {\r\n  const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(element);\r\n  if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isTopLayer)(element)) {\r\n    return win;\r\n  }\r\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {\r\n    let svgOffsetParent = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getParentNode)(element);\r\n    while (svgOffsetParent && !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isLastTraversableNode)(svgOffsetParent)) {\r\n      if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\r\n        return svgOffsetParent;\r\n      }\r\n      svgOffsetParent = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getParentNode)(svgOffsetParent);\r\n    }\r\n    return win;\r\n  }\r\n  let offsetParent = getTrueOffsetParent(element, polyfill);\r\n  while (offsetParent && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isTableElement)(offsetParent) && isStaticPositioned(offsetParent)) {\r\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\r\n  }\r\n  if (offsetParent && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isLastTraversableNode)(offsetParent) && isStaticPositioned(offsetParent) && !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isContainingBlock)(offsetParent)) {\r\n    return win;\r\n  }\r\n  return offsetParent || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getContainingBlock)(element) || win;\r\n}\r\n\r\nconst getElementRects = async function (data) {\r\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\r\n  const getDimensionsFn = this.getDimensions;\r\n  const floatingDimensions = await getDimensionsFn(data.floating);\r\n  return {\r\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\r\n    floating: {\r\n      x: 0,\r\n      y: 0,\r\n      width: floatingDimensions.width,\r\n      height: floatingDimensions.height\r\n    }\r\n  };\r\n};\r\n\r\nfunction isRTL(element) {\r\n  return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element).direction === 'rtl';\r\n}\r\n\r\nconst platform = {\r\n  convertOffsetParentRelativeRectToViewportRelativeRect,\r\n  getDocumentElement: _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement,\r\n  getClippingRect,\r\n  getOffsetParent,\r\n  getElementRects,\r\n  getClientRects,\r\n  getDimensions,\r\n  getScale,\r\n  isElement: _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement,\r\n  isRTL\r\n};\r\n\r\nfunction rectsAreEqual(a, b) {\r\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\r\n}\r\n\r\n// https://samthor.au/2021/observing-dom/\r\nfunction observeMove(element, onMove) {\r\n  let io = null;\r\n  let timeoutId;\r\n  const root = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element);\r\n  function cleanup() {\r\n    var _io;\r\n    clearTimeout(timeoutId);\r\n    (_io = io) == null || _io.disconnect();\r\n    io = null;\r\n  }\r\n  function refresh(skip, threshold) {\r\n    if (skip === void 0) {\r\n      skip = false;\r\n    }\r\n    if (threshold === void 0) {\r\n      threshold = 1;\r\n    }\r\n    cleanup();\r\n    const elementRectForRootMargin = element.getBoundingClientRect();\r\n    const {\r\n      left,\r\n      top,\r\n      width,\r\n      height\r\n    } = elementRectForRootMargin;\r\n    if (!skip) {\r\n      onMove();\r\n    }\r\n    if (!width || !height) {\r\n      return;\r\n    }\r\n    const insetTop = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.floor)(top);\r\n    const insetRight = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.floor)(root.clientWidth - (left + width));\r\n    const insetBottom = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.floor)(root.clientHeight - (top + height));\r\n    const insetLeft = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.floor)(left);\r\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\r\n    const options = {\r\n      rootMargin,\r\n      threshold: (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(0, (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.min)(1, threshold)) || 1\r\n    };\r\n    let isFirstUpdate = true;\r\n    function handleObserve(entries) {\r\n      const ratio = entries[0].intersectionRatio;\r\n      if (ratio !== threshold) {\r\n        if (!isFirstUpdate) {\r\n          return refresh();\r\n        }\r\n        if (!ratio) {\r\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\r\n          // to prevent an infinite loop of updates.\r\n          timeoutId = setTimeout(() => {\r\n            refresh(false, 1e-7);\r\n          }, 1000);\r\n        } else {\r\n          refresh(false, ratio);\r\n        }\r\n      }\r\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\r\n        // It's possible that even though the ratio is reported as 1, the\r\n        // element is not actually fully within the IntersectionObserver's root\r\n        // area anymore. This can happen under performance constraints. This may\r\n        // be a bug in the browser's IntersectionObserver implementation. To\r\n        // work around this, we compare the element's bounding rect now with\r\n        // what it was at the time we created the IntersectionObserver. If they\r\n        // are not equal then the element moved, so we refresh.\r\n        refresh();\r\n      }\r\n      isFirstUpdate = false;\r\n    }\r\n\r\n    // Older browsers don't support a `document` as the root and will throw an\r\n    // error.\r\n    try {\r\n      io = new IntersectionObserver(handleObserve, {\r\n        ...options,\r\n        // Handle <iframe>s\r\n        root: root.ownerDocument\r\n      });\r\n    } catch (e) {\r\n      io = new IntersectionObserver(handleObserve, options);\r\n    }\r\n    io.observe(element);\r\n  }\r\n  refresh(true);\r\n  return cleanup;\r\n}\r\n\r\n/**\r\n * Automatically updates the position of the floating element when necessary.\r\n * Should only be called when the floating element is mounted on the DOM or\r\n * visible on the screen.\r\n * @returns cleanup function that should be invoked when the floating element is\r\n * removed from the DOM or hidden from the screen.\r\n * @see https://floating-ui.com/docs/autoUpdate\r\n */\r\nfunction autoUpdate(reference, floating, update, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    ancestorScroll = true,\r\n    ancestorResize = true,\r\n    elementResize = typeof ResizeObserver === 'function',\r\n    layoutShift = typeof IntersectionObserver === 'function',\r\n    animationFrame = false\r\n  } = options;\r\n  const referenceEl = unwrapElement(reference);\r\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getOverflowAncestors)(referenceEl) : []), ...(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getOverflowAncestors)(floating)] : [];\r\n  ancestors.forEach(ancestor => {\r\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\r\n      passive: true\r\n    });\r\n    ancestorResize && ancestor.addEventListener('resize', update);\r\n  });\r\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\r\n  let reobserveFrame = -1;\r\n  let resizeObserver = null;\r\n  if (elementResize) {\r\n    resizeObserver = new ResizeObserver(_ref => {\r\n      let [firstEntry] = _ref;\r\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\r\n        // Prevent update loops when using the `size` middleware.\r\n        // https://github.com/floating-ui/floating-ui/issues/1740\r\n        resizeObserver.unobserve(floating);\r\n        cancelAnimationFrame(reobserveFrame);\r\n        reobserveFrame = requestAnimationFrame(() => {\r\n          var _resizeObserver;\r\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\r\n        });\r\n      }\r\n      update();\r\n    });\r\n    if (referenceEl && !animationFrame) {\r\n      resizeObserver.observe(referenceEl);\r\n    }\r\n    resizeObserver.observe(floating);\r\n  }\r\n  let frameId;\r\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\r\n  if (animationFrame) {\r\n    frameLoop();\r\n  }\r\n  function frameLoop() {\r\n    const nextRefRect = getBoundingClientRect(reference);\r\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\r\n      update();\r\n    }\r\n    prevRefRect = nextRefRect;\r\n    frameId = requestAnimationFrame(frameLoop);\r\n  }\r\n  update();\r\n  return () => {\r\n    var _resizeObserver2;\r\n    ancestors.forEach(ancestor => {\r\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\r\n      ancestorResize && ancestor.removeEventListener('resize', update);\r\n    });\r\n    cleanupIo == null || cleanupIo();\r\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\r\n    resizeObserver = null;\r\n    if (animationFrame) {\r\n      cancelAnimationFrame(frameId);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Resolves with an object of overflow side offsets that determine how much the\r\n * element is overflowing a given clipping boundary on each side.\r\n * - positive = overflowing the boundary by that number of pixels\r\n * - negative = how many pixels left before it will overflow\r\n * - 0 = lies flush with the boundary\r\n * @see https://floating-ui.com/docs/detectOverflow\r\n */\r\nconst detectOverflow = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.detectOverflow;\r\n\r\n/**\r\n * Modifies the placement by translating the floating element along the\r\n * specified axes.\r\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\r\n * object may be passed.\r\n * @see https://floating-ui.com/docs/offset\r\n */\r\nconst offset = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.offset;\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by choosing the placement\r\n * that has the most space available automatically, without needing to specify a\r\n * preferred placement. Alternative to `flip`.\r\n * @see https://floating-ui.com/docs/autoPlacement\r\n */\r\nconst autoPlacement = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.autoPlacement;\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by shifting it in order to\r\n * keep it in view when it will overflow the clipping boundary.\r\n * @see https://floating-ui.com/docs/shift\r\n */\r\nconst shift = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.shift;\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by flipping the `placement`\r\n * in order to keep it in view when the preferred placement(s) will overflow the\r\n * clipping boundary. Alternative to `autoPlacement`.\r\n * @see https://floating-ui.com/docs/flip\r\n */\r\nconst flip = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.flip;\r\n\r\n/**\r\n * Provides data that allows you to change the size of the floating element —\r\n * for instance, prevent it from overflowing the clipping boundary or match the\r\n * width of the reference element.\r\n * @see https://floating-ui.com/docs/size\r\n */\r\nconst size = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.size;\r\n\r\n/**\r\n * Provides data to hide the floating element in applicable situations, such as\r\n * when it is not in the same clipping context as the reference element.\r\n * @see https://floating-ui.com/docs/hide\r\n */\r\nconst hide = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.hide;\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.arrow;\r\n\r\n/**\r\n * Provides improved positioning for inline reference elements that can span\r\n * over multiple lines, such as hyperlinks or range selections.\r\n * @see https://floating-ui.com/docs/inline\r\n */\r\nconst inline = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.inline;\r\n\r\n/**\r\n * Built-in `limiter` that will stop `shift()` at a certain point.\r\n */\r\nconst limitShift = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.limitShift;\r\n\r\n/**\r\n * Computes the `x` and `y` coordinates that will place the floating element\r\n * next to a given reference element.\r\n */\r\nconst computePosition = (reference, floating, options) => {\r\n  // This caches the expensive `getClippingElementAncestors` function so that\r\n  // multiple lifecycle resets re-use the same result. It only lives for a\r\n  // single call. If other functions become expensive, we can add them as well.\r\n  const cache = new Map();\r\n  const mergedOptions = {\r\n    platform,\r\n    ...options\r\n  };\r\n  const platformWithCache = {\r\n    ...mergedOptions.platform,\r\n    _c: cache\r\n  };\r\n  return (0,_floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.computePosition)(reference, floating, {\r\n    ...mergedOptions,\r\n    platform: platformWithCache\r\n  });\r\n};\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs":
/*!*************************************************************************!*\
  !*** ../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getComputedStyle: () => (/* binding */ getComputedStyle),\n/* harmony export */   getContainingBlock: () => (/* binding */ getContainingBlock),\n/* harmony export */   getDocumentElement: () => (/* binding */ getDocumentElement),\n/* harmony export */   getFrameElement: () => (/* binding */ getFrameElement),\n/* harmony export */   getNearestOverflowAncestor: () => (/* binding */ getNearestOverflowAncestor),\n/* harmony export */   getNodeName: () => (/* binding */ getNodeName),\n/* harmony export */   getNodeScroll: () => (/* binding */ getNodeScroll),\n/* harmony export */   getOverflowAncestors: () => (/* binding */ getOverflowAncestors),\n/* harmony export */   getParentNode: () => (/* binding */ getParentNode),\n/* harmony export */   getWindow: () => (/* binding */ getWindow),\n/* harmony export */   isContainingBlock: () => (/* binding */ isContainingBlock),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isHTMLElement: () => (/* binding */ isHTMLElement),\n/* harmony export */   isLastTraversableNode: () => (/* binding */ isLastTraversableNode),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isOverflowElement: () => (/* binding */ isOverflowElement),\n/* harmony export */   isShadowRoot: () => (/* binding */ isShadowRoot),\n/* harmony export */   isTableElement: () => (/* binding */ isTableElement),\n/* harmony export */   isTopLayer: () => (/* binding */ isTopLayer),\n/* harmony export */   isWebKit: () => (/* binding */ isWebKit)\n/* harmony export */ });\nfunction hasWindow() {\r\n  return typeof window !== 'undefined';\r\n}\r\nfunction getNodeName(node) {\r\n  if (isNode(node)) {\r\n    return (node.nodeName || '').toLowerCase();\r\n  }\r\n  // Mocked nodes in testing environments may not be instances of Node. By\r\n  // returning `#document` an infinite loop won't occur.\r\n  // https://github.com/floating-ui/floating-ui/issues/2317\r\n  return '#document';\r\n}\r\nfunction getWindow(node) {\r\n  var _node$ownerDocument;\r\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\r\n}\r\nfunction getDocumentElement(node) {\r\n  var _ref;\r\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\r\n}\r\nfunction isNode(value) {\r\n  if (!hasWindow()) {\r\n    return false;\r\n  }\r\n  return value instanceof Node || value instanceof getWindow(value).Node;\r\n}\r\nfunction isElement(value) {\r\n  if (!hasWindow()) {\r\n    return false;\r\n  }\r\n  return value instanceof Element || value instanceof getWindow(value).Element;\r\n}\r\nfunction isHTMLElement(value) {\r\n  if (!hasWindow()) {\r\n    return false;\r\n  }\r\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\r\n}\r\nfunction isShadowRoot(value) {\r\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\r\n    return false;\r\n  }\r\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\r\n}\r\nfunction isOverflowElement(element) {\r\n  const {\r\n    overflow,\r\n    overflowX,\r\n    overflowY,\r\n    display\r\n  } = getComputedStyle(element);\r\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\r\n}\r\nfunction isTableElement(element) {\r\n  return ['table', 'td', 'th'].includes(getNodeName(element));\r\n}\r\nfunction isTopLayer(element) {\r\n  return [':popover-open', ':modal'].some(selector => {\r\n    try {\r\n      return element.matches(selector);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  });\r\n}\r\nfunction isContainingBlock(elementOrCss) {\r\n  const webkit = isWebKit();\r\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\r\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\r\n  return ['transform', 'translate', 'scale', 'rotate', 'perspective'].some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\r\n}\r\nfunction getContainingBlock(element) {\r\n  let currentNode = getParentNode(element);\r\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\r\n    if (isContainingBlock(currentNode)) {\r\n      return currentNode;\r\n    } else if (isTopLayer(currentNode)) {\r\n      return null;\r\n    }\r\n    currentNode = getParentNode(currentNode);\r\n  }\r\n  return null;\r\n}\r\nfunction isWebKit() {\r\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\r\n  return CSS.supports('-webkit-backdrop-filter', 'none');\r\n}\r\nfunction isLastTraversableNode(node) {\r\n  return ['html', 'body', '#document'].includes(getNodeName(node));\r\n}\r\nfunction getComputedStyle(element) {\r\n  return getWindow(element).getComputedStyle(element);\r\n}\r\nfunction getNodeScroll(element) {\r\n  if (isElement(element)) {\r\n    return {\r\n      scrollLeft: element.scrollLeft,\r\n      scrollTop: element.scrollTop\r\n    };\r\n  }\r\n  return {\r\n    scrollLeft: element.scrollX,\r\n    scrollTop: element.scrollY\r\n  };\r\n}\r\nfunction getParentNode(node) {\r\n  if (getNodeName(node) === 'html') {\r\n    return node;\r\n  }\r\n  const result =\r\n  // Step into the shadow DOM of the parent of a slotted node.\r\n  node.assignedSlot ||\r\n  // DOM Element detected.\r\n  node.parentNode ||\r\n  // ShadowRoot detected.\r\n  isShadowRoot(node) && node.host ||\r\n  // Fallback.\r\n  getDocumentElement(node);\r\n  return isShadowRoot(result) ? result.host : result;\r\n}\r\nfunction getNearestOverflowAncestor(node) {\r\n  const parentNode = getParentNode(node);\r\n  if (isLastTraversableNode(parentNode)) {\r\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\r\n  }\r\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\r\n    return parentNode;\r\n  }\r\n  return getNearestOverflowAncestor(parentNode);\r\n}\r\nfunction getOverflowAncestors(node, list, traverseIframes) {\r\n  var _node$ownerDocument2;\r\n  if (list === void 0) {\r\n    list = [];\r\n  }\r\n  if (traverseIframes === void 0) {\r\n    traverseIframes = true;\r\n  }\r\n  const scrollableAncestor = getNearestOverflowAncestor(node);\r\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\r\n  const win = getWindow(scrollableAncestor);\r\n  if (isBody) {\r\n    const frameElement = getFrameElement(win);\r\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\r\n  }\r\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\r\n}\r\nfunction getFrameElement(win) {\r\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs":
/*!*********************************************************************!*\
  !*** ../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alignments: () => (/* binding */ alignments),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   createCoords: () => (/* binding */ createCoords),\n/* harmony export */   evaluate: () => (/* binding */ evaluate),\n/* harmony export */   expandPaddingObject: () => (/* binding */ expandPaddingObject),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   getAlignment: () => (/* binding */ getAlignment),\n/* harmony export */   getAlignmentAxis: () => (/* binding */ getAlignmentAxis),\n/* harmony export */   getAlignmentSides: () => (/* binding */ getAlignmentSides),\n/* harmony export */   getAxisLength: () => (/* binding */ getAxisLength),\n/* harmony export */   getExpandedPlacements: () => (/* binding */ getExpandedPlacements),\n/* harmony export */   getOppositeAlignmentPlacement: () => (/* binding */ getOppositeAlignmentPlacement),\n/* harmony export */   getOppositeAxis: () => (/* binding */ getOppositeAxis),\n/* harmony export */   getOppositeAxisPlacements: () => (/* binding */ getOppositeAxisPlacements),\n/* harmony export */   getOppositePlacement: () => (/* binding */ getOppositePlacement),\n/* harmony export */   getPaddingObject: () => (/* binding */ getPaddingObject),\n/* harmony export */   getSide: () => (/* binding */ getSide),\n/* harmony export */   getSideAxis: () => (/* binding */ getSideAxis),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   placements: () => (/* binding */ placements),\n/* harmony export */   rectToClientRect: () => (/* binding */ rectToClientRect),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   sides: () => (/* binding */ sides)\n/* harmony export */ });\n/**\r\n * Custom positioning reference element.\r\n * @see https://floating-ui.com/docs/virtual-elements\r\n */\r\n\r\nconst sides = ['top', 'right', 'bottom', 'left'];\r\nconst alignments = ['start', 'end'];\r\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\r\nconst min = Math.min;\r\nconst max = Math.max;\r\nconst round = Math.round;\r\nconst floor = Math.floor;\r\nconst createCoords = v => ({\r\n  x: v,\r\n  y: v\r\n});\r\nconst oppositeSideMap = {\r\n  left: 'right',\r\n  right: 'left',\r\n  bottom: 'top',\r\n  top: 'bottom'\r\n};\r\nconst oppositeAlignmentMap = {\r\n  start: 'end',\r\n  end: 'start'\r\n};\r\nfunction clamp(start, value, end) {\r\n  return max(start, min(value, end));\r\n}\r\nfunction evaluate(value, param) {\r\n  return typeof value === 'function' ? value(param) : value;\r\n}\r\nfunction getSide(placement) {\r\n  return placement.split('-')[0];\r\n}\r\nfunction getAlignment(placement) {\r\n  return placement.split('-')[1];\r\n}\r\nfunction getOppositeAxis(axis) {\r\n  return axis === 'x' ? 'y' : 'x';\r\n}\r\nfunction getAxisLength(axis) {\r\n  return axis === 'y' ? 'height' : 'width';\r\n}\r\nfunction getSideAxis(placement) {\r\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\r\n}\r\nfunction getAlignmentAxis(placement) {\r\n  return getOppositeAxis(getSideAxis(placement));\r\n}\r\nfunction getAlignmentSides(placement, rects, rtl) {\r\n  if (rtl === void 0) {\r\n    rtl = false;\r\n  }\r\n  const alignment = getAlignment(placement);\r\n  const alignmentAxis = getAlignmentAxis(placement);\r\n  const length = getAxisLength(alignmentAxis);\r\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\r\n  if (rects.reference[length] > rects.floating[length]) {\r\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\r\n  }\r\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\r\n}\r\nfunction getExpandedPlacements(placement) {\r\n  const oppositePlacement = getOppositePlacement(placement);\r\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\r\n}\r\nfunction getOppositeAlignmentPlacement(placement) {\r\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\r\n}\r\nfunction getSideList(side, isStart, rtl) {\r\n  const lr = ['left', 'right'];\r\n  const rl = ['right', 'left'];\r\n  const tb = ['top', 'bottom'];\r\n  const bt = ['bottom', 'top'];\r\n  switch (side) {\r\n    case 'top':\r\n    case 'bottom':\r\n      if (rtl) return isStart ? rl : lr;\r\n      return isStart ? lr : rl;\r\n    case 'left':\r\n    case 'right':\r\n      return isStart ? tb : bt;\r\n    default:\r\n      return [];\r\n  }\r\n}\r\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\r\n  const alignment = getAlignment(placement);\r\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\r\n  if (alignment) {\r\n    list = list.map(side => side + \"-\" + alignment);\r\n    if (flipAlignment) {\r\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\r\n    }\r\n  }\r\n  return list;\r\n}\r\nfunction getOppositePlacement(placement) {\r\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\r\n}\r\nfunction expandPaddingObject(padding) {\r\n  return {\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    ...padding\r\n  };\r\n}\r\nfunction getPaddingObject(padding) {\r\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\r\n    top: padding,\r\n    right: padding,\r\n    bottom: padding,\r\n    left: padding\r\n  };\r\n}\r\nfunction rectToClientRect(rect) {\r\n  const {\r\n    x,\r\n    y,\r\n    width,\r\n    height\r\n  } = rect;\r\n  return {\r\n    width,\r\n    height,\r\n    top: y,\r\n    left: x,\r\n    right: x + width,\r\n    bottom: y + height,\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS91dGlscy9kaXN0L2Zsb2F0aW5nLXVpLnV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN5VyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFx1c2VyXFxEb3dubG9hZHNcXGdseW5hYy5haS13ZWJzaXRlXFxub2RlX21vZHVsZXNcXEBmbG9hdGluZy11aVxcdXRpbHNcXGRpc3RcXGZsb2F0aW5nLXVpLnV0aWxzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3VzdG9tIHBvc2l0aW9uaW5nIHJlZmVyZW5jZSBlbGVtZW50LlxyXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvdmlydHVhbC1lbGVtZW50c1xyXG4gKi9cclxuXHJcbmNvbnN0IHNpZGVzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcclxuY29uc3QgYWxpZ25tZW50cyA9IFsnc3RhcnQnLCAnZW5kJ107XHJcbmNvbnN0IHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovc2lkZXMucmVkdWNlKChhY2MsIHNpZGUpID0+IGFjYy5jb25jYXQoc2lkZSwgc2lkZSArIFwiLVwiICsgYWxpZ25tZW50c1swXSwgc2lkZSArIFwiLVwiICsgYWxpZ25tZW50c1sxXSksIFtdKTtcclxuY29uc3QgbWluID0gTWF0aC5taW47XHJcbmNvbnN0IG1heCA9IE1hdGgubWF4O1xyXG5jb25zdCByb3VuZCA9IE1hdGgucm91bmQ7XHJcbmNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcclxuY29uc3QgY3JlYXRlQ29vcmRzID0gdiA9PiAoe1xyXG4gIHg6IHYsXHJcbiAgeTogdlxyXG59KTtcclxuY29uc3Qgb3Bwb3NpdGVTaWRlTWFwID0ge1xyXG4gIGxlZnQ6ICdyaWdodCcsXHJcbiAgcmlnaHQ6ICdsZWZ0JyxcclxuICBib3R0b206ICd0b3AnLFxyXG4gIHRvcDogJ2JvdHRvbSdcclxufTtcclxuY29uc3Qgb3Bwb3NpdGVBbGlnbm1lbnRNYXAgPSB7XHJcbiAgc3RhcnQ6ICdlbmQnLFxyXG4gIGVuZDogJ3N0YXJ0J1xyXG59O1xyXG5mdW5jdGlvbiBjbGFtcChzdGFydCwgdmFsdWUsIGVuZCkge1xyXG4gIHJldHVybiBtYXgoc3RhcnQsIG1pbih2YWx1ZSwgZW5kKSk7XHJcbn1cclxuZnVuY3Rpb24gZXZhbHVhdGUodmFsdWUsIHBhcmFtKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlKHBhcmFtKSA6IHZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNpZGUocGxhY2VtZW50KSB7XHJcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xyXG59XHJcbmZ1bmN0aW9uIGdldEFsaWdubWVudChwbGFjZW1lbnQpIHtcclxuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XHJcbn1cclxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVBeGlzKGF4aXMpIHtcclxuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xyXG59XHJcbmZ1bmN0aW9uIGdldEF4aXNMZW5ndGgoYXhpcykge1xyXG4gIHJldHVybiBheGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2lkZUF4aXMocGxhY2VtZW50KSB7XHJcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluY2x1ZGVzKGdldFNpZGUocGxhY2VtZW50KSkgPyAneScgOiAneCc7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpIHtcclxuICByZXR1cm4gZ2V0T3Bwb3NpdGVBeGlzKGdldFNpZGVBeGlzKHBsYWNlbWVudCkpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEFsaWdubWVudFNpZGVzKHBsYWNlbWVudCwgcmVjdHMsIHJ0bCkge1xyXG4gIGlmIChydGwgPT09IHZvaWQgMCkge1xyXG4gICAgcnRsID0gZmFsc2U7XHJcbiAgfVxyXG4gIGNvbnN0IGFsaWdubWVudCA9IGdldEFsaWdubWVudChwbGFjZW1lbnQpO1xyXG4gIGNvbnN0IGFsaWdubWVudEF4aXMgPSBnZXRBbGlnbm1lbnRBeGlzKHBsYWNlbWVudCk7XHJcbiAgY29uc3QgbGVuZ3RoID0gZ2V0QXhpc0xlbmd0aChhbGlnbm1lbnRBeGlzKTtcclxuICBsZXQgbWFpbkFsaWdubWVudFNpZGUgPSBhbGlnbm1lbnRBeGlzID09PSAneCcgPyBhbGlnbm1lbnQgPT09IChydGwgPyAnZW5kJyA6ICdzdGFydCcpID8gJ3JpZ2h0JyA6ICdsZWZ0JyA6IGFsaWdubWVudCA9PT0gJ3N0YXJ0JyA/ICdib3R0b20nIDogJ3RvcCc7XHJcbiAgaWYgKHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdID4gcmVjdHMuZmxvYXRpbmdbbGVuZ3RoXSkge1xyXG4gICAgbWFpbkFsaWdubWVudFNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluQWxpZ25tZW50U2lkZSk7XHJcbiAgfVxyXG4gIHJldHVybiBbbWFpbkFsaWdubWVudFNpZGUsIGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5BbGlnbm1lbnRTaWRlKV07XHJcbn1cclxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xyXG4gIGNvbnN0IG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcclxuICByZXR1cm4gW2dldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xyXG59XHJcbmZ1bmN0aW9uIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCkge1xyXG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGFsaWdubWVudCA9PiBvcHBvc2l0ZUFsaWdubWVudE1hcFthbGlnbm1lbnRdKTtcclxufVxyXG5mdW5jdGlvbiBnZXRTaWRlTGlzdChzaWRlLCBpc1N0YXJ0LCBydGwpIHtcclxuICBjb25zdCBsciA9IFsnbGVmdCcsICdyaWdodCddO1xyXG4gIGNvbnN0IHJsID0gWydyaWdodCcsICdsZWZ0J107XHJcbiAgY29uc3QgdGIgPSBbJ3RvcCcsICdib3R0b20nXTtcclxuICBjb25zdCBidCA9IFsnYm90dG9tJywgJ3RvcCddO1xyXG4gIHN3aXRjaCAoc2lkZSkge1xyXG4gICAgY2FzZSAndG9wJzpcclxuICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgIGlmIChydGwpIHJldHVybiBpc1N0YXJ0ID8gcmwgOiBscjtcclxuICAgICAgcmV0dXJuIGlzU3RhcnQgPyBsciA6IHJsO1xyXG4gICAgY2FzZSAnbGVmdCc6XHJcbiAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgIHJldHVybiBpc1N0YXJ0ID8gdGIgOiBidDtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBbXTtcclxuICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVBeGlzUGxhY2VtZW50cyhwbGFjZW1lbnQsIGZsaXBBbGlnbm1lbnQsIGRpcmVjdGlvbiwgcnRsKSB7XHJcbiAgY29uc3QgYWxpZ25tZW50ID0gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCk7XHJcbiAgbGV0IGxpc3QgPSBnZXRTaWRlTGlzdChnZXRTaWRlKHBsYWNlbWVudCksIGRpcmVjdGlvbiA9PT0gJ3N0YXJ0JywgcnRsKTtcclxuICBpZiAoYWxpZ25tZW50KSB7XHJcbiAgICBsaXN0ID0gbGlzdC5tYXAoc2lkZSA9PiBzaWRlICsgXCItXCIgKyBhbGlnbm1lbnQpO1xyXG4gICAgaWYgKGZsaXBBbGlnbm1lbnQpIHtcclxuICAgICAgbGlzdCA9IGxpc3QuY29uY2F0KGxpc3QubWFwKGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBsaXN0O1xyXG59XHJcbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xyXG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIHNpZGUgPT4gb3Bwb3NpdGVTaWRlTWFwW3NpZGVdKTtcclxufVxyXG5mdW5jdGlvbiBleHBhbmRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdG9wOiAwLFxyXG4gICAgcmlnaHQ6IDAsXHJcbiAgICBib3R0b206IDAsXHJcbiAgICBsZWZ0OiAwLFxyXG4gICAgLi4ucGFkZGluZ1xyXG4gIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IGV4cGFuZFBhZGRpbmdPYmplY3QocGFkZGluZykgOiB7XHJcbiAgICB0b3A6IHBhZGRpbmcsXHJcbiAgICByaWdodDogcGFkZGluZyxcclxuICAgIGJvdHRvbTogcGFkZGluZyxcclxuICAgIGxlZnQ6IHBhZGRpbmdcclxuICB9O1xyXG59XHJcbmZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xyXG4gIGNvbnN0IHtcclxuICAgIHgsXHJcbiAgICB5LFxyXG4gICAgd2lkdGgsXHJcbiAgICBoZWlnaHRcclxuICB9ID0gcmVjdDtcclxuICByZXR1cm4ge1xyXG4gICAgd2lkdGgsXHJcbiAgICBoZWlnaHQsXHJcbiAgICB0b3A6IHksXHJcbiAgICBsZWZ0OiB4LFxyXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcclxuICAgIGJvdHRvbTogeSArIGhlaWdodCxcclxuICAgIHgsXHJcbiAgICB5XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHsgYWxpZ25tZW50cywgY2xhbXAsIGNyZWF0ZUNvb3JkcywgZXZhbHVhdGUsIGV4cGFuZFBhZGRpbmdPYmplY3QsIGZsb29yLCBnZXRBbGlnbm1lbnQsIGdldEFsaWdubWVudEF4aXMsIGdldEFsaWdubWVudFNpZGVzLCBnZXRBeGlzTGVuZ3RoLCBnZXRFeHBhbmRlZFBsYWNlbWVudHMsIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50LCBnZXRPcHBvc2l0ZUF4aXMsIGdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMsIGdldE9wcG9zaXRlUGxhY2VtZW50LCBnZXRQYWRkaW5nT2JqZWN0LCBnZXRTaWRlLCBnZXRTaWRlQXhpcywgbWF4LCBtaW4sIHBsYWNlbWVudHMsIHJlY3RUb0NsaWVudFJlY3QsIHJvdW5kLCBzaWRlcyB9O1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\n");

/***/ })

};
;