"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tabbable";
exports.ids = ["vendor-chunks/tabbable"];
exports.modules = {

/***/ "(ssr)/../node_modules/tabbable/dist/index.esm.js":
/*!**************************************************!*\
  !*** ../node_modules/tabbable/dist/index.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   focusable: () => (/* binding */ focusable),\n/* harmony export */   getTabIndex: () => (/* binding */ getTabIndex),\n/* harmony export */   isFocusable: () => (/* binding */ isFocusable),\n/* harmony export */   isTabbable: () => (/* binding */ isTabbable),\n/* harmony export */   tabbable: () => (/* binding */ tabbable)\n/* harmony export */ });\n/*!\r\n* tabbable 6.2.0\r\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\r\n*/\r\n// NOTE: separate `:not()` selectors has broader browser support than the newer\r\n//  `:not([inert], [inert] *)` (Feb 2023)\r\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\r\n//  the entire query to fail, resulting in no nodes found, which will break a lot\r\n//  of things... so we have to rely on JS to identify nodes inside an inert container\r\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\r\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\r\nvar NoElement = typeof Element === 'undefined';\r\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\r\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\r\n  var _element$getRootNode;\r\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\r\n} : function (element) {\r\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\r\n};\r\n\r\n/**\r\n * Determines if a node is inert or in an inert ancestor.\r\n * @param {Element} [node]\r\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\r\n *  see if any of them are inert. If false, only `node` itself is considered.\r\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\r\n *  False if `node` is falsy.\r\n */\r\nvar isInert = function isInert(node, lookUp) {\r\n  var _node$getAttribute;\r\n  if (lookUp === void 0) {\r\n    lookUp = true;\r\n  }\r\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\r\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\r\n  //  if it's `null` (not specified) or 'false', it's an active element\r\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\r\n  var inert = inertAtt === '' || inertAtt === 'true';\r\n\r\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\r\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\r\n  //  code works for any kind of node\r\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\r\n  //  so it likely would not support `:is([inert] *)` either...\r\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Determines if a node's content is editable.\r\n * @param {Element} [node]\r\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\r\n */\r\nvar isContentEditable = function isContentEditable(node) {\r\n  var _node$getAttribute2;\r\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\r\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\r\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\r\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\r\n  return attValue === '' || attValue === 'true';\r\n};\r\n\r\n/**\r\n * @param {Element} el container to check in\r\n * @param {boolean} includeContainer add container to check\r\n * @param {(node: Element) => boolean} filter filter candidates\r\n * @returns {Element[]}\r\n */\r\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\r\n  // even if `includeContainer=false`, we still have to check it for inertness because\r\n  //  if it's inert, all its children are inert\r\n  if (isInert(el)) {\r\n    return [];\r\n  }\r\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\r\n  if (includeContainer && matches.call(el, candidateSelector)) {\r\n    candidates.unshift(el);\r\n  }\r\n  candidates = candidates.filter(filter);\r\n  return candidates;\r\n};\r\n\r\n/**\r\n * @callback GetShadowRoot\r\n * @param {Element} element to check for shadow root\r\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\r\n */\r\n\r\n/**\r\n * @callback ShadowRootFilter\r\n * @param {Element} shadowHostNode the element which contains shadow content\r\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\r\n */\r\n\r\n/**\r\n * @typedef {Object} CandidateScope\r\n * @property {Element} scopeParent contains inner candidates\r\n * @property {Element[]} candidates list of candidates found in the scope parent\r\n */\r\n\r\n/**\r\n * @typedef {Object} IterativeOptions\r\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\r\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\r\n *  or a boolean stating if it has an undisclosed shadow root\r\n * @property {(node: Element) => boolean} filter filter candidates\r\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\r\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\r\n */\r\n\r\n/**\r\n * @param {Element[]} elements list of element containers to match candidates from\r\n * @param {boolean} includeContainer add container list to check\r\n * @param {IterativeOptions} options\r\n * @returns {Array.<Element|CandidateScope>}\r\n */\r\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\r\n  var candidates = [];\r\n  var elementsToCheck = Array.from(elements);\r\n  while (elementsToCheck.length) {\r\n    var element = elementsToCheck.shift();\r\n    if (isInert(element, false)) {\r\n      // no need to look up since we're drilling down\r\n      // anything inside this container will also be inert\r\n      continue;\r\n    }\r\n    if (element.tagName === 'SLOT') {\r\n      // add shadow dom slot scope (slot itself cannot be focusable)\r\n      var assigned = element.assignedElements();\r\n      var content = assigned.length ? assigned : element.children;\r\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\r\n      if (options.flatten) {\r\n        candidates.push.apply(candidates, nestedCandidates);\r\n      } else {\r\n        candidates.push({\r\n          scopeParent: element,\r\n          candidates: nestedCandidates\r\n        });\r\n      }\r\n    } else {\r\n      // check candidate element\r\n      var validCandidate = matches.call(element, candidateSelector);\r\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\r\n        candidates.push(element);\r\n      }\r\n\r\n      // iterate over shadow content if possible\r\n      var shadowRoot = element.shadowRoot ||\r\n      // check for an undisclosed shadow\r\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\r\n\r\n      // no inert look up because we're already drilling down and checking for inertness\r\n      //  on the way down, so all containers to this root node should have already been\r\n      //  vetted as non-inert\r\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\r\n      if (shadowRoot && validShadowRoot) {\r\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\r\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\r\n        //  child candidates found because they're likely slotted elements (elements that are\r\n        //  children of the web component element (which has the shadow), in the light dom, but\r\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\r\n        //  _after_ we return from this recursive call\r\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\r\n        if (options.flatten) {\r\n          candidates.push.apply(candidates, _nestedCandidates);\r\n        } else {\r\n          candidates.push({\r\n            scopeParent: element,\r\n            candidates: _nestedCandidates\r\n          });\r\n        }\r\n      } else {\r\n        // there's not shadow so just dig into the element's (light dom) children\r\n        //  __without__ giving the element special scope treatment\r\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\r\n      }\r\n    }\r\n  }\r\n  return candidates;\r\n};\r\n\r\n/**\r\n * @private\r\n * Determines if the node has an explicitly specified `tabindex` attribute.\r\n * @param {HTMLElement} node\r\n * @returns {boolean} True if so; false if not.\r\n */\r\nvar hasTabIndex = function hasTabIndex(node) {\r\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\r\n};\r\n\r\n/**\r\n * Determine the tab index of a given node.\r\n * @param {HTMLElement} node\r\n * @returns {number} Tab order (negative, 0, or positive number).\r\n * @throws {Error} If `node` is falsy.\r\n */\r\nvar getTabIndex = function getTabIndex(node) {\r\n  if (!node) {\r\n    throw new Error('No node provided');\r\n  }\r\n  if (node.tabIndex < 0) {\r\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\r\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\r\n    // yet they are still part of the regular tab order; in FF, they get a default\r\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\r\n    // order, consider their tab index to be 0.\r\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\r\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\r\n    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {\r\n      return 0;\r\n    }\r\n  }\r\n  return node.tabIndex;\r\n};\r\n\r\n/**\r\n * Determine the tab index of a given node __for sort order purposes__.\r\n * @param {HTMLElement} node\r\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\r\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\r\n *  inserted into the correct sort position.\r\n * @returns {number} Tab order (negative, 0, or positive number).\r\n */\r\nvar getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {\r\n  var tabIndex = getTabIndex(node);\r\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\r\n    return 0;\r\n  }\r\n  return tabIndex;\r\n};\r\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\r\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\r\n};\r\nvar isInput = function isInput(node) {\r\n  return node.tagName === 'INPUT';\r\n};\r\nvar isHiddenInput = function isHiddenInput(node) {\r\n  return isInput(node) && node.type === 'hidden';\r\n};\r\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\r\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\r\n    return child.tagName === 'SUMMARY';\r\n  });\r\n  return r;\r\n};\r\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\r\n  for (var i = 0; i < nodes.length; i++) {\r\n    if (nodes[i].checked && nodes[i].form === form) {\r\n      return nodes[i];\r\n    }\r\n  }\r\n};\r\nvar isTabbableRadio = function isTabbableRadio(node) {\r\n  if (!node.name) {\r\n    return true;\r\n  }\r\n  var radioScope = node.form || getRootNode(node);\r\n  var queryRadios = function queryRadios(name) {\r\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\r\n  };\r\n  var radioSet;\r\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\r\n    radioSet = queryRadios(window.CSS.escape(node.name));\r\n  } else {\r\n    try {\r\n      radioSet = queryRadios(node.name);\r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\r\n      return false;\r\n    }\r\n  }\r\n  var checked = getCheckedRadio(radioSet, node.form);\r\n  return !checked || checked === node;\r\n};\r\nvar isRadio = function isRadio(node) {\r\n  return isInput(node) && node.type === 'radio';\r\n};\r\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\r\n  return isRadio(node) && !isTabbableRadio(node);\r\n};\r\n\r\n// determines if a node is ultimately attached to the window's document\r\nvar isNodeAttached = function isNodeAttached(node) {\r\n  var _nodeRoot;\r\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\r\n  //  (but NOT _the_ document; see second 'If' comment below for more).\r\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\r\n  //  is attached, and the one we need to check if it's in the document or not (because the\r\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\r\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\r\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\r\n  //  visibility, including all the nodes it contains). The host could be any normal node,\r\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\r\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\r\n  //  tested).\r\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\r\n  //  that is attached (or find none) because the node might be in nested shadows...\r\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\r\n  //  document (per the docs) and while it's a Document-type object, that document does not\r\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\r\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\r\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\r\n  //  node is actually detached.\r\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\r\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\r\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\r\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\r\n  var nodeRoot = node && getRootNode(node);\r\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;\r\n\r\n  // in some cases, a detached node will return itself as the root instead of a document or\r\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\r\n  var attached = false;\r\n  if (nodeRoot && nodeRoot !== node) {\r\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\r\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\r\n    while (!attached && nodeRootHost) {\r\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;\r\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\r\n      //  which means we need to get the host's host and check if that parent host is contained\r\n      //  in (i.e. attached to) the document\r\n      nodeRoot = getRootNode(nodeRootHost);\r\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\r\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\r\n    }\r\n  }\r\n  return attached;\r\n};\r\nvar isZeroArea = function isZeroArea(node) {\r\n  var _node$getBoundingClie = node.getBoundingClientRect(),\r\n    width = _node$getBoundingClie.width,\r\n    height = _node$getBoundingClie.height;\r\n  return width === 0 && height === 0;\r\n};\r\nvar isHidden = function isHidden(node, _ref) {\r\n  var displayCheck = _ref.displayCheck,\r\n    getShadowRoot = _ref.getShadowRoot;\r\n  // NOTE: visibility will be `undefined` if node is detached from the document\r\n  //  (see notes about this further down), which means we will consider it visible\r\n  //  (this is legacy behavior from a very long way back)\r\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\r\n  //  _visibility_ check, not a _display_ check\r\n  if (getComputedStyle(node).visibility === 'hidden') {\r\n    return true;\r\n  }\r\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\r\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\r\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\r\n    return true;\r\n  }\r\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\r\n    if (typeof getShadowRoot === 'function') {\r\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\r\n      //  'non-zero-area' fallback\r\n      var originalNode = node;\r\n      while (node) {\r\n        var parentElement = node.parentElement;\r\n        var rootNode = getRootNode(node);\r\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\r\n        ) {\r\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\r\n          //  fall back to a non-zero-area test\r\n          return isZeroArea(node);\r\n        } else if (node.assignedSlot) {\r\n          // iterate up slot\r\n          node = node.assignedSlot;\r\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\r\n          // cross shadow boundary\r\n          node = rootNode.host;\r\n        } else {\r\n          // iterate up normal dom\r\n          node = parentElement;\r\n        }\r\n      }\r\n      node = originalNode;\r\n    }\r\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\r\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\r\n    //  it might be a falsy value, which means shadow DOM support is disabled\r\n\r\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\r\n    //  now we can just test to see if it would normally be visible or not, provided it's\r\n    //  attached to the main document.\r\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\r\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\r\n\r\n    if (isNodeAttached(node)) {\r\n      // this works wherever the node is: if there's at least one client rect, it's\r\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\r\n      //  node itself is hidden in place of its contents; and there's no need to search\r\n      //  up the hierarchy either\r\n      return !node.getClientRects().length;\r\n    }\r\n\r\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\r\n    //  API will __always__ return zero rects (this can happen, for example, if React\r\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\r\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\r\n    //\r\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\r\n    //  because styles are only computed for nodes that are in the document.\r\n    //\r\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\r\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\r\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\r\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\r\n    //  considering __everything__ to be visible because of the innability to determine styles.\r\n    //\r\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\r\n    //  nodes as visible with the 'none' fallback.__\r\n    if (displayCheck !== 'legacy-full') {\r\n      return true; // hidden\r\n    }\r\n    // else, fallback to 'none' mode and consider the node visible\r\n  } else if (displayCheck === 'non-zero-area') {\r\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\r\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\r\n    //  client rect, we don't special-case for whether the node is attached or not. In\r\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\r\n    //  times, and that includes attached or not.\r\n    return isZeroArea(node);\r\n  }\r\n\r\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\r\n  //  it's visible\r\n  return false;\r\n};\r\n\r\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\r\n//  unless they are in the _first_ <legend> element of the top-most disabled\r\n//  fieldset\r\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\r\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\r\n    var parentNode = node.parentElement;\r\n    // check if `node` is contained in a disabled <fieldset>\r\n    while (parentNode) {\r\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\r\n        // look for the first <legend> among the children of the disabled <fieldset>\r\n        for (var i = 0; i < parentNode.children.length; i++) {\r\n          var child = parentNode.children.item(i);\r\n          // when the first <legend> (in document order) is found\r\n          if (child.tagName === 'LEGEND') {\r\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\r\n            // return whether `node` is a descendant of its first <legend>\r\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\r\n          }\r\n        }\r\n        // the disabled <fieldset> containing `node` has no <legend>\r\n        return true;\r\n      }\r\n      parentNode = parentNode.parentElement;\r\n    }\r\n  }\r\n\r\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\r\n  //  enabled/disabled state\r\n  return false;\r\n};\r\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\r\n  if (node.disabled ||\r\n  // we must do an inert look up to filter out any elements inside an inert ancestor\r\n  //  because we're limited in the type of selectors we can use in JSDom (see related\r\n  //  note related to `candidateSelectors`)\r\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) ||\r\n  // For a details element with a summary, the summary element gets the focus\r\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\r\n  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\r\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\r\n  if (isNaN(tabIndex) || tabIndex >= 0) {\r\n    return true;\r\n  }\r\n  // If a custom element has an explicit negative tabindex,\r\n  // browsers will not allow tab targeting said element's children.\r\n  return false;\r\n};\r\n\r\n/**\r\n * @param {Array.<Element|CandidateScope>} candidates\r\n * @returns Element[]\r\n */\r\nvar sortByOrder = function sortByOrder(candidates) {\r\n  var regularTabbables = [];\r\n  var orderedTabbables = [];\r\n  candidates.forEach(function (item, i) {\r\n    var isScope = !!item.scopeParent;\r\n    var element = isScope ? item.scopeParent : item;\r\n    var candidateTabindex = getSortOrderTabIndex(element, isScope);\r\n    var elements = isScope ? sortByOrder(item.candidates) : element;\r\n    if (candidateTabindex === 0) {\r\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\r\n    } else {\r\n      orderedTabbables.push({\r\n        documentOrder: i,\r\n        tabIndex: candidateTabindex,\r\n        item: item,\r\n        isScope: isScope,\r\n        content: elements\r\n      });\r\n    }\r\n  });\r\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\r\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\r\n    return acc;\r\n  }, []).concat(regularTabbables);\r\n};\r\nvar tabbable = function tabbable(container, options) {\r\n  options = options || {};\r\n  var candidates;\r\n  if (options.getShadowRoot) {\r\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\r\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\r\n      flatten: false,\r\n      getShadowRoot: options.getShadowRoot,\r\n      shadowRootFilter: isValidShadowRootTabbable\r\n    });\r\n  } else {\r\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\r\n  }\r\n  return sortByOrder(candidates);\r\n};\r\nvar focusable = function focusable(container, options) {\r\n  options = options || {};\r\n  var candidates;\r\n  if (options.getShadowRoot) {\r\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\r\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\r\n      flatten: true,\r\n      getShadowRoot: options.getShadowRoot\r\n    });\r\n  } else {\r\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\r\n  }\r\n  return candidates;\r\n};\r\nvar isTabbable = function isTabbable(node, options) {\r\n  options = options || {};\r\n  if (!node) {\r\n    throw new Error('No node provided');\r\n  }\r\n  if (matches.call(node, candidateSelector) === false) {\r\n    return false;\r\n  }\r\n  return isNodeMatchingSelectorTabbable(options, node);\r\n};\r\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\r\nvar isFocusable = function isFocusable(node, options) {\r\n  options = options || {};\r\n  if (!node) {\r\n    throw new Error('No node provided');\r\n  }\r\n  if (matches.call(node, focusableCandidateSelector) === false) {\r\n    return false;\r\n  }\r\n  return isNodeMatchingSelectorFocusable(options, node);\r\n};\r\n\r\n\r\n//# sourceMappingURL=index.esm.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/tabbable/dist/index.esm.js\n");

/***/ })

};
;